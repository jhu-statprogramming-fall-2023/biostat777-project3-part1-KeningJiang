[{"path":"/articles/Example analysis.html","id":"research-question","dir":"Articles","previous_headings":"","what":"Research question","title":"Example analysis","text":"Examine hotel cancellations factors associated hotel cancellations United States 2015 2017.","code":""},{"path":"/articles/Example analysis.html","id":"origin-data","dir":"Articles","previous_headings":"","what":"Origin data","title":"Example analysis","text":"dataset included TidyTuesday, 2020-02-11. original dataset comes open hotel booking demand dataset Antonio, Almeida Nunes, 2019. dataset includes bookings resort hotels city hotels 1st July 2015 31st August 2017, including bookings effectively arrived bookings canceled.","code":""},{"path":"/articles/Example analysis.html","id":"data-dictionary","dir":"Articles","previous_headings":"","what":"Data dictionary","title":"Example analysis","text":"Variables Hotels","code":""},{"path":[]},{"path":"/articles/Example analysis.html","id":"set-up-the-dataset","dir":"Articles","previous_headings":"Data management","what":"Set up the dataset","title":"Example analysis","text":"","code":"# tests if a directory named \"data\" exists locally if (!dir.exists(here(\"data\"))) {     dir.create(here(\"data\")) }  if (!file.exists(here(\"data\", \"hotels.RDS\"))) {     tuesdata <- tidytuesdayR::tt_load(\"2020-02-11\")     hotels <- tuesdata$hotels     # save the files to RDS object     saveRDS(tuesdata$hotels, file = here(\"data\", \"hotels.RDS\")) } Downloading file 1 of 3: `H1.csv` Downloading file 2 of 3: `H2.csv` Downloading file 3 of 3: `hotels.csv` # Load the dataset hotels<- readRDS(here(\"data\", \"hotels.RDS\"))"},{"path":"/articles/Example analysis.html","id":"data-cleaning","dir":"Articles","previous_headings":"Data management","what":"Data cleaning","title":"Example analysis","text":"","code":"# Filter for USA hotel bookings and select relevant variables hotels_clean<-    hotels %>%   filter(country==\"USA\") %>%   select(-c('arrival_date_week_number','arrival_date_day_of_month', 'meal','country', 'market_segment', 'distribution_channel',              'reserved_room_type', 'assigned_room_type', 'agent', 'company', 'days_in_waiting_list', 'required_car_parking_spaces',              'total_of_special_requests', 'reservation_status', 'reservation_status_date'))  # Drop the observations with missing values hotels_clean <- na.omit(hotels_clean)  # Glimpse the cleaned dataset glimpse(hotels_clean) ## Rows: 2,097 ## Columns: 17 ## $ hotel                          <chr> \"Resort Hotel\", \"Resort Hotel\", \"Resort… ## $ is_canceled                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … ## $ lead_time                      <dbl> 68, 14, 10, 9, 51, 51, 98, 88, 10, 42, … ## $ arrival_date_year              <dbl> 2015, 2015, 2015, 2015, 2015, 2015, 201… ## $ arrival_date_month             <chr> \"July\", \"July\", \"July\", \"July\", \"July\",… ## $ stays_in_weekend_nights        <dbl> 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 2, … ## $ stays_in_week_nights           <dbl> 4, 2, 2, 1, 3, 3, 1, 4, 1, 2, 1, 1, 8, … ## $ adults                         <dbl> 2, 2, 2, 2, 2, 3, 2, 3, 2, 2, 2, 2, 2, … ## $ children                       <dbl> 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, … ## $ babies                         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … ## $ is_repeated_guest              <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … ## $ previous_cancellations         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … ## $ previous_bookings_not_canceled <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … ## $ booking_changes                <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, … ## $ deposit_type                   <chr> \"No Deposit\", \"No Deposit\", \"No Deposit… ## $ customer_type                  <chr> \"Transient\", \"Transient\", \"Transient\", … ## $ adr                            <dbl> 97.00, 98.00, 153.00, 94.71, 117.81, 11…"},{"path":"/articles/Example analysis.html","id":"create-variables-for-analysis","dir":"Articles","previous_headings":"Data management","what":"Create variables for analysis","title":"Example analysis","text":"","code":"hotels_clean <-    hotels_clean %>% # Mutate the year variable to a factor variable   mutate(   arrival_date_year = case_when(arrival_date_year==2015 ~ 0,                             arrival_date_year==2016 ~ 1,                             arrival_date_year==2017 ~ 2)    ) %>% # Combine the month variable for a season variable   mutate(   arrival_date_month = recode(arrival_date_month,   January = 1,   February = 2,   March = 3,   April = 4,   May = 5,   June = 6,   July = 7,   August = 8,   September = 9,   October = 10,   November = 11,   December = 12 ) ) %>%   mutate(arrival_date_season = case_when(arrival_date_month >=3 & arrival_date_month <=5 ~ 0,                             arrival_date_month >= 6 & arrival_date_month <= 8 ~ 1,                             arrival_date_month >= 9 & arrival_date_month <= 11 ~ 2,                             arrival_date_month == 12 | arrival_date_month <= 2 ~ 3)) %>% # Create a combined variable for number of children and babies due to small numbers   mutate(childbaby = children + babies)"},{"path":"/articles/Example analysis.html","id":"label-variables","dir":"Articles","previous_headings":"Data management","what":"Label variables","title":"Example analysis","text":"","code":"# Lable the factor variables hotels_clean$is_canceled <- factor(hotels_clean$is_canceled, levels=0:1, labels=c(\"No\", \"Yes\")) hotels_clean$arrival_date_year <- factor(hotels_clean$arrival_date_year, levels=0:2, labels=c(\"2015\", \"2016\", \"2017\")) hotels_clean$arrival_date_season <- factor(hotels_clean$arrival_date_season, levels=0:3, labels=c(\"Spring\", \"Summer\", \"Fall\", \"Winter\")) hotels_clean$is_repeated_guest <- factor(hotels_clean$is_repeated_guest, levels=0:1, labels=c(\"No\", \"Yes\"))  # Use label() function from table1 package to label the variables label(hotels_clean$hotel) <- \"Type of hotel\" label(hotels_clean$lead_time) <- \"Number of days between booking and arrival\" label(hotels_clean$arrival_date_year) <- \"Year of arrival date\" label(hotels_clean$arrival_date_season) <- \"Season of arrival date\" label(hotels_clean$stays_in_weekend_nights) <- \"Number of weekend nights stayed\" label(hotels_clean$stays_in_week_nights) <- \"Number of week nights stayed\" label(hotels_clean$adults) <- \"Number of adults\" label(hotels_clean$childbaby) <- \"Number of children and babies\" label(hotels_clean$is_repeated_guest) <- \"Repeated guest\" label(hotels_clean$booking_changes) <- \"Number of changes to the booking\" label(hotels_clean$adr) <- \"Average daily rate, $\""},{"path":[]},{"path":"/articles/Example analysis.html","id":"table-1-characteristics-of-hotel-bookings-overall-and-by-cancellation","dir":"Articles","previous_headings":"Results","what":"Table 1: Characteristics of hotel bookings overall and by cancellation","title":"Example analysis","text":"","code":"table1(~ hotel + lead_time + arrival_date_year + arrival_date_season +           stays_in_weekend_nights + stays_in_week_nights + adults +           childbaby + is_repeated_guest + booking_changes + adr          | is_canceled, data=hotels_clean, c(left=\"Overall\"))"},{"path":"/articles/Example analysis.html","id":"figure-1-number-of-completed-and-cancelled-hotel-bookings-by-season-and-year","dir":"Articles","previous_headings":"Results","what":"Figure 1: Number of completed and cancelled hotel bookings by season and year","title":"Example analysis","text":"","code":"# Define a custom theme to start with custom_theme <- theme(   panel.background = element_blank(),   axis.ticks = element_blank(),   axis.title = element_text(size=14, face=\"bold\"),   axis.line = element_line(size = 0.5),   plot.title = element_text(color=\"black\", size=14, face=\"bold\", hjust=0.5), )  # Data for figure 1 hotels_summary1 <-    hotels_clean %>%    group_by(arrival_date_year, arrival_date_season, is_canceled) %>%   summarize(     n=n()   ) ## `summarise()` has grouped output by 'arrival_date_year', 'arrival_date_season'. ## You can override using the `.groups` argument. # Generate figure 1 using geom_bar() figure1 <- ggplot(data=hotels_summary1, aes(x=arrival_date_season, y=n, fill=is_canceled)) +            # Add stacked bar plot            geom_bar(stat=\"identity\") +            # Specify color manual            scale_fill_manual(name = \"Cancelled booking\",                              values=c(\"#40B0A6\", \"#E1BE6A\"),                              labels = c(\"No\", \"Yes\")) +            facet_wrap(~ arrival_date_year, ncol=1) +            # Add labels            labs(x=\"Season\",                 y=\"Number of hotel bookings\",                 title=\"Number of completed and cancelled hotel bookings by season and year\",                 subtitle = \"Larger number of bookings and cancellations during summer\",                 caption = \"Kening Jiang\") +            # Modify the theme            custom_theme +                  theme(axis.text.x=element_text(size=12),                        axis.text.y=element_text(size=14),                        legend.text = element_text(size = 12),                        legend.title=element_text(size=14, face=\"bold\"),                        plot.subtitle=element_text(size=12, hjust=0.5),                        legend.box.background = element_rect(),                        legend.box.margin = margin(5,5,5,5),                        strip.text.x = element_text(size = 14, face=\"bold\"),                        strip.background = element_rect(fill=\"#D3E1D0\"),                        plot.caption = element_text(size=14)                  ) # Display the plot figure1"},{"path":"/articles/Example analysis.html","id":"figure-2-number-of-completed-and-cancelled-hotel-bookings-by-hotel-type","dir":"Articles","previous_headings":"Results","what":"Figure 2: Number of completed and cancelled hotel bookings by hotel type","title":"Example analysis","text":"","code":"# Data for figure 2 hotels_summary2 <-    hotels_clean %>%    group_by(is_canceled, hotel) %>%   summarize(     n=n()   ) ## `summarise()` has grouped output by 'is_canceled'. You can override using the ## `.groups` argument. # Generate figure 2 using geom_bar() figure2 <- ggplot(data=hotels_summary2, aes(x=hotel, y=n, fill=is_canceled)) +            # Add stacked bar plot            geom_bar(stat=\"identity\") +            # Specify color manual            scale_fill_manual(name = \"Cancelled booking\",                              values=c(\"#40B0A6\", \"#E1BE6A\"),                              labels = c(\"No\", \"Yes\")) +            # Add labels            labs(x=\"Hotel type\",                 y=\"Number of hotel bookings\",                 title=\"Number of completed and cancelled hotel bookings by hotel type\",                 subtitle = \"Larger number of bookings and cancellations in city hotels\",                 caption = \"Kening Jiang\") +            # Modify the theme            custom_theme +                  theme(axis.text.x=element_text(size=12),                        axis.text.y=element_text(size=14),                        legend.text = element_text(size = 12),                        legend.title=element_text(size=14, face=\"bold\"),                        plot.subtitle=element_text(size=12, hjust=0.5),                        legend.box.background = element_rect(),                        legend.box.margin = margin(5,5,5,5),                        plot.caption = element_text(size=14)                  )  # Display the plot figure2"},{"path":"/articles/Example analysis.html","id":"figure-3-characteristics-of-hotel-bookings-by-cancellation","dir":"Articles","previous_headings":"Results","what":"Figure 3: Characteristics of hotel bookings by cancellation","title":"Example analysis","text":"","code":"# Data for figure 3 # Mean of continuous characteristics by cancellation hotels_summary3_mean <-    hotels_clean %>%    group_by(is_canceled) %>%   summarize(     lead_time=mean(lead_time),     stays_in_weekend_nights = mean(stays_in_weekend_nights),     stays_in_week_nights = mean(stays_in_week_nights),     adults = mean(adults),     childbaby = mean(childbaby),     booking_changes = mean(booking_changes),     adr = mean(adr)   ) %>% pivot_longer(cols = c(lead_time, stays_in_weekend_nights, stays_in_week_nights, adults, childbaby, booking_changes, adr), names_to = \"measure\", values_to = \"mean\")   # Standard deviation of continuous characteristics by cancellation hotels_summary3_sd <-    hotels_clean %>%    group_by(is_canceled) %>%   summarize(     lead_time=sd(lead_time),     stays_in_weekend_nights = sd(stays_in_weekend_nights),     stays_in_week_nights = sd(stays_in_week_nights),     adults = sd(adults),     childbaby = sd(childbaby),     booking_changes = sd(booking_changes),     adr = sd(adr)   ) %>% pivot_longer(cols = c(lead_time, stays_in_weekend_nights, stays_in_week_nights, adults, childbaby, booking_changes, adr), names_to = \"measure\", values_to = \"sd\")   # Join for combined dataset for mean and standard deviation of characteristics hotels_summary3 <- inner_join(hotels_summary3_mean, hotels_summary3_sd, by=c(\"is_canceled\", \"measure\")) hotels_summary3_1 <- hotels_summary3 %>% filter(measure==\"lead_time\" | measure == \"adr\") hotels_summary3_2 <- hotels_summary3 %>% filter(measure!=\"lead_time\" & measure != \"adr\")  # Modify the labels for facet measure.labs <- c(\"Time before arrival\", \"Average daily rate\") names(measure.labs) <- c(\"lead_time\", \"adr\")  # Generate figure 3 using geom_bar() and geom_errorbar() figure3_1 <- ggplot(hotels_summary3_1, aes(x=is_canceled, y=mean)) +               # Add the bar plot for mean of characteristics              geom_bar(position=position_dodge(), stat=\"identity\",               fill=\"#E1BE6A\") +               # Add the error bar for standard deviation of characteristics              geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2) +              # Create facet by variable              facet_wrap(~ measure, ncol=2, labeller = labeller(measure = measure.labs))  +              # Add labels              labs(x=\"Bookings cancelled\",                   y=\"Mean and standard deviation\",                   title=\"Characteristics of bookings by cancellation\",                   subtitle = \"Longer time and higher average daily rate among cancelled bookings\",                   caption = \"Kening Jiang\") +              # Modify the theme               custom_theme +                  theme(axis.text.x=element_text(size=12),                        axis.text.y=element_text(size=14),                        legend.text = element_text(size = 12),                        legend.title=element_text(size=14, face=\"bold\"),                        plot.subtitle=element_text(size=12, hjust=0.5),                        legend.box.background = element_rect(),                        legend.box.margin = margin(5,5,5,5),                        strip.text.x = element_text(size = 14, face=\"bold\"),                        strip.background = element_rect(fill=\"#D3E1D0\"),                        plot.caption = element_text(size=14)                  )  # Display the plot figure3_1 # Modify the labels for facet measure.labs <- c(\"Number of weekend nights\", \"Number of weekdays\", \"Number of adults\", \"Number of children/babies\", \"Changes in bookings\") names(measure.labs) <- c(\"stays_in_weekend_nights\", \"stays_in_week_nights\", \"adults\", \"childbaby\", \"booking_changes\")  # Generate figure 3 using geom_bar() and geom_errorbar() figure3_2 <- ggplot(hotels_summary3_2, aes(x=is_canceled, y=mean)) +               # Add the bar plot for mean of characteristics              geom_bar(position=position_dodge(), stat=\"identity\",               fill=\"#E1BE6A\") +               # Add the error bar for standard deviation of characteristics              geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2) +              # Create facet by variable              facet_wrap(~ measure, ncol=2, labeller = labeller(measure = measure.labs))  +              # Add labels              labs(x=\"Bookings cancelled\",                   y=\"Mean and standard deviation\",                   title=\"Characteristics of bookings by cancellation (continued)\",                   subtitle = \"Number of weekdays and weekend days and adult guests are higher among cancelled bookings\",                   caption = \"Kening Jiang\") +              # Modify the theme              custom_theme +                  theme(axis.text.x=element_text(size=12),                        axis.text.y=element_text(size=14),                        legend.text = element_text(size = 12),                        legend.title=element_text(size=14, face=\"bold\"),                        plot.subtitle=element_text(size=12, hjust=0.5),                        legend.box.background = element_rect(),                        legend.box.margin = margin(5,5,5,5),                        strip.text.x = element_text(size = 14, face=\"bold\"),                        strip.background = element_rect(fill=\"#D3E1D0\"),                        plot.caption = element_text(size=14)                  )  # Display the plot figure3_2"},{"path":"/articles/Example analysis.html","id":"univariate-analysis-for-the-association-between-each-characteristic-and-odds-of-cancelled-booking","dir":"Articles","previous_headings":"Results","what":"Univariate analysis for the association between each characteristic and odds of cancelled booking","title":"Example analysis","text":"","code":"# Store the name of outcome and continuous and cateogorical variables outcomes <- hotels_clean %>%   select(is_canceled) %>% colnames covars_cont <- hotels_clean %>%   select(lead_time, stays_in_weekend_nights, stays_in_week_nights, adults, childbaby, booking_changes, adr) %>% colnames covars_cat <- hotels_clean %>%   select(hotel, arrival_date_year, arrival_date_season, is_repeated_guest) %>% colnames  # Univariate logistic regression for continuous variables paramlist1 <- expand_grid(outcomes, covars_cont) uni_summary1 <- paramlist1 %>%    mutate(mod = map2(outcomes, covars_cont, ~ glm(reformulate(.y, .x), data = hotels_clean, family = binomial)),          res = map(mod, broom::tidy))  uni_summary1$res ## [[1]] ## # A tibble: 2 × 5 ##   term        estimate std.error statistic  p.value ##   <chr>          <dbl>     <dbl>     <dbl>    <dbl> ## 1 (Intercept) -1.46     0.0729      -20.0  2.37e-89 ## 2 lead_time    0.00363  0.000581      6.24 4.44e-10 ##  ## [[2]] ## # A tibble: 2 × 5 ##   term                    estimate std.error statistic  p.value ##   <chr>                      <dbl>     <dbl>     <dbl>    <dbl> ## 1 (Intercept)               -1.34     0.0721    -18.5  8.67e-77 ## 2 stays_in_weekend_nights    0.200    0.0542      3.69 2.25e- 4 ##  ## [[3]] ## # A tibble: 2 × 5 ##   term                 estimate std.error statistic  p.value ##   <chr>                   <dbl>     <dbl>     <dbl>    <dbl> ## 1 (Intercept)            -1.41     0.0810    -17.4  5.27e-68 ## 2 stays_in_week_nights    0.127    0.0306      4.15 3.30e- 5 ##  ## [[4]] ## # A tibble: 2 × 5 ##   term        estimate std.error statistic  p.value ##   <chr>          <dbl>     <dbl>     <dbl>    <dbl> ## 1 (Intercept)   -1.79     0.199      -9.00 2.31e-19 ## 2 adults         0.332    0.0996      3.33 8.70e- 4 ##  ## [[5]] ## # A tibble: 2 × 5 ##   term        estimate std.error statistic   p.value ##   <chr>          <dbl>     <dbl>     <dbl>     <dbl> ## 1 (Intercept)   -1.22     0.0548    -22.3  1.61e-110 ## 2 childbaby      0.329    0.0867      3.79 1.49e-  4 ##  ## [[6]] ## # A tibble: 2 × 5 ##   term            estimate std.error statistic  p.value ##   <chr>              <dbl>     <dbl>     <dbl>    <dbl> ## 1 (Intercept)       -1.10     0.0551    -20.0  1.12e-88 ## 2 booking_changes   -0.197    0.0749     -2.63 8.53e- 3 ##  ## [[7]] ## # A tibble: 2 × 5 ##   term        estimate std.error statistic  p.value ##   <chr>          <dbl>     <dbl>     <dbl>    <dbl> ## 1 (Intercept) -1.93     0.137       -14.1  2.59e-45 ## 2 adr          0.00606  0.000966      6.28 3.49e-10 # Univariate logistic regression for categorical variables paramlist2 <- expand_grid(outcomes, covars_cat) uni_summary2 <- paramlist2 %>%    mutate(mod = map2(outcomes, covars_cat, ~ glm(reformulate(.y, .x), data = hotels_clean, family = binomial)),          res = map(mod, broom::tidy))  uni_summary2$res ## [[1]] ## # A tibble: 2 × 5 ##   term              estimate std.error statistic  p.value ##   <chr>                <dbl>     <dbl>     <dbl>    <dbl> ## 1 (Intercept)         -1.02     0.0563    -18.1  3.18e-73 ## 2 hotelResort Hotel   -0.713    0.140      -5.10 3.37e- 7 ##  ## [[2]] ## # A tibble: 3 × 5 ##   term                  estimate std.error statistic p.value ##   <chr>                    <dbl>     <dbl>     <dbl>   <dbl> ## 1 (Intercept)              -17.6      295.   -0.0596   0.952 ## 2 arrival_date_year2016     16.3      295.    0.0553   0.956 ## 3 arrival_date_year2017     16.7      295.    0.0567   0.955 ##  ## [[3]] ## # A tibble: 4 × 5 ##   term                      estimate std.error statistic  p.value ##   <chr>                        <dbl>     <dbl>     <dbl>    <dbl> ## 1 (Intercept)               -0.961      0.0921  -10.4    1.79e-25 ## 2 arrival_date_seasonSummer -0.00297    0.120    -0.0248 9.80e- 1 ## 3 arrival_date_seasonFall   -0.848      0.169    -5.02   5.17e- 7 ## 4 arrival_date_seasonWinter -0.531      0.189    -2.81   4.95e- 3 ##  ## [[4]] ## # A tibble: 2 × 5 ##   term                 estimate std.error statistic   p.value ##   <chr>                   <dbl>     <dbl>     <dbl>     <dbl> ## 1 (Intercept)             -1.15    0.0513    -22.4  4.40e-111 ## 2 is_repeated_guestYes    -1.74    1.03       -1.69 9.05e-  2 # Use map and map_Dbl() for coefficients of regression models coef1 <- cbind(covars_cont, outcomes %>%    map(~ map(covars_cont, function(.y) glm(reformulate(.y, .x), data = hotels_clean, family = binomial))) %>%    flatten %>%    map(summary) |> map(.f = coef)|> map_dbl(2) ) summary1 <- outcomes %>%    map(~ map(covars_cont, function(.y) glm(reformulate(.y, .x), data = hotels_clean, family = binomial))) %>%    flatten %>%    map(summary)  # Standard error of regression models str1 <- vector(\"numeric\", length(covars_cont)) for (i in 1:7){   str1[i] <- coefficients(summary1[[i]])[2,2] }  # Create the summary table for univariate analysis uni_summary <- as.data.frame(cbind(coef1, str1)) uni_summary <- uni_summary %>%   rename(     variable = covars_cont,     coefficients = V2,     strerr = str1     )  uni_summary$coefficients <- as.numeric(uni_summary$coefficients) uni_summary$strerr <- as.numeric(uni_summary$strerr)"},{"path":"/articles/Example analysis.html","id":"figure-4--summary-of-univariate-analysis","dir":"Articles","previous_headings":"Results","what":"Figure 4. Summary of univariate analysis","title":"Example analysis","text":"","code":"# Modify x labels for plot x_labels <- c('Average daily rate', 'N_adults', 'Booking changes', 'N_children', 'Time before arrival', 'N_weekdays', 'N_weekends')  # Generate figure 4 using geom_point() and geom_errorbar() Figure4 <-ggplot(uni_summary, aes(x=variable, y=coefficients)) +            # Add points            geom_point() +            # Add error bars            geom_errorbar(aes(ymin=coefficients - 1.96 * strerr, ymax = coefficients + 1.96 * strerr), width=.1) +            # Add horizontal line at y=0            geom_hline(yintercept=0, color = \"red\") +            # Modify the x labels            scale_x_discrete(labels=x_labels) +            # Add labels            labs(x=\"Variable\",                 y=\"Log (odds ratio) and 95% confidence interval\",                 title=\"Summary of univariate analysis\",                 subtitle = \"All the continuous variables are significantly associated with cancellation\",                 caption = \"Kening Jiang\") +            # Modify the theme            custom_theme +                  theme(axis.text.x=element_text(size=12),                        axis.text.y=element_text(size=14),                        legend.text = element_text(size = 12),                        legend.title=element_text(size=14, face=\"bold\"),                        plot.subtitle=element_text(size=14, hjust=0.5),                        legend.box.background = element_rect(),                        legend.box.margin = margin(5,5,5,5),                        plot.caption = element_text(size=14)                  ) # Display the plot Figure4 # Multivairable logistic regression  # Year of booking and repeated guest are dropped as they are not significant in the univariate analysis mvr <- summary(glm(is_canceled~hotel + lead_time + as.factor(arrival_date_season) + stays_in_weekend_nights                              + stays_in_week_nights + adults + childbaby + booking_changes + adr,                               data = hotels_clean, family = binomial)) mvr ##  ## Call: ## glm(formula = is_canceled ~ hotel + lead_time + as.factor(arrival_date_season) +  ##     stays_in_weekend_nights + stays_in_week_nights + adults +  ##     childbaby + booking_changes + adr, family = binomial, data = hotels_clean) ##  ## Coefficients: ##                                       Estimate Std. Error z value Pr(>|z|)     ## (Intercept)                          -2.510581   0.259002  -9.693  < 2e-16 *** ## hotelResort Hotel                    -0.863882   0.151992  -5.684 1.32e-08 *** ## lead_time                             0.003593   0.000666   5.395 6.84e-08 *** ## as.factor(arrival_date_season)Summer -0.211697   0.132160  -1.602   0.1092     ## as.factor(arrival_date_season)Fall   -0.781374   0.176127  -4.436 9.15e-06 *** ## as.factor(arrival_date_season)Winter -0.193728   0.205984  -0.941   0.3470     ## stays_in_weekend_nights               0.147958   0.060934   2.428   0.0152 *   ## stays_in_week_nights                  0.147392   0.033460   4.405 1.06e-05 *** ## adults                                0.055005   0.111936   0.491   0.6231     ## childbaby                             0.066526   0.104874   0.634   0.5259     ## booking_changes                      -0.331462   0.076561  -4.329 1.50e-05 *** ## adr                                   0.007937   0.001362   5.828 5.61e-09 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## (Dispersion parameter for binomial family taken to be 1) ##  ##     Null deviance: 2306.0  on 2096  degrees of freedom ## Residual deviance: 2115.6  on 2085  degrees of freedom ## AIC: 2139.6 ##  ## Number of Fisher Scoring iterations: 4 # Summary dataset for coefficients and standard errors of the regression mvr_summary <- as.data.frame(cbind(mvr$coefficients[2:12, 1], mvr$coefficients[2:12, 2])) mvr_summary <- mvr_summary %>%   rename(     coefficients = V1,     strerr = V2     )  mvr_summary$variable <- row.names(mvr_summary)"},{"path":"/articles/Example analysis.html","id":"figure-5--summary-of-multivariable-analysis","dir":"Articles","previous_headings":"Results","what":"Figure 5. Summary of multivariable analysis","title":"Example analysis","text":"","code":"# Modify x labels for plot x_labels2 <- c('Average daily rate', 'N_adults', \"Fall\", \"Summer\",\"Winter\", 'Booking changes', 'N_children', \"Hotel type\", 'Time before arrival', 'N_weekdays', 'N_weekends')  # Generate figure 5 using geom_point() and geom_errorbar() Figure5 <-ggplot(mvr_summary, aes(x=variable, y=coefficients)) +            # Add points            geom_point() +            # Add error bars            geom_errorbar(aes(ymin=coefficients - 1.96 * strerr, ymax = coefficients + 1.96 * strerr), width=.1) +            # Add horizontal line at y=0            geom_hline(yintercept=0, color = \"red\") +            # Modify the x labels            scale_x_discrete(labels=x_labels2) +            # Add labels            labs(x=\"Variable\",                 y=\"Log (odds ratio) and 95% confidence interval\",                 title=\"Summary of multivariable analysis\",                 subtitle = \"Season and number of adults and children are not significant\",                 caption = \"Kening Jiang\") +            # Modify the theme            custom_theme +                  theme(axis.text.x=element_text(size=12, angle=90),                        axis.text.y=element_text(size=14),                        legend.text = element_text(size = 12),                        legend.title=element_text(size=14, face=\"bold\"),                        plot.subtitle=element_text(size=14, hjust=0.5),                        legend.box.background = element_rect(),                        legend.box.margin = margin(5,5,5,5),                        plot.caption = element_text(size=14)                  ) # Display the plot Figure5"},{"path":"/articles/Example analysis.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Example analysis","text":"Among 2,097 hotel bookings 2015 2017 United States, 501 (24%) bookings cancelled 1,596 (76%) bookings completed. examined whether hotel type, time booking arrival, season year bookings, number weekdays weekend days, number adult guests, number children/babies, changes bookings, repeated guest, average daily rate associated cancelled bookings. multivariable logistic regression, resort (vs. city) hotel, fall (vs. spring) changes bookings independently associated lower odds cancellations, longer time booking arrival, longer stays weekdays weekend days, higher average daily rating independently associated higher odds cancellations.","code":""},{"path":[]},{"path":"/articles/Example analysis.html","id":"data-wrangling","dir":"Articles","previous_headings":"Functions used in the analysis","what":"Data wrangling","title":"Example analysis","text":"filter() select() mutate() group_by() summarise() inner_join() pivot_longer()","code":""},{"path":"/articles/Example analysis.html","id":"purrr-functions","dir":"Articles","previous_headings":"Functions used in the analysis","what":"Purrr functions","title":"Example analysis","text":"map() map_dbl() map2()","code":""},{"path":"/articles/Example analysis.html","id":"functions-from-the-table1-package-in-the-vignette","dir":"Articles","previous_headings":"Functions used in the analysis","what":"Functions from the table1 package in the vignette","title":"Example analysis","text":"table1() label()","code":""},{"path":"/articles/Example analysis.html","id":"figures","dir":"Articles","previous_headings":"Functions used in the analysis","what":"Figures","title":"Example analysis","text":"geom_bar() geom_point() geom_errorbar()","code":""},{"path":"/articles/table1-examples.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using the table1 Package to Create HTML Tables of Descriptive Statistics","text":"standard practice epidemiology related fields first table journal article, referred “Table 1”, table presents descriptive statistics baseline characteristics study population stratified exposure. package makes fairly straightforward produce table using R. output format HTML (advantage easy copy Word document; Chrome browser works well). convenient use package conjunction knitr R Markdown, HTML output passed untouched (note: version 1.1 longer necessary specify results='asis' chunk option HTML output appear correctly final document); fact, vignette serves example. package allow quite bit flexibility customize table’s contents appearance, come cost ease--use (programming, knowledge CSS).","code":""},{"path":"/articles/table1-examples.html","id":"example-1","dir":"Articles","previous_headings":"","what":"Example 1","title":"Using the table1 Package to Create HTML Tables of Descriptive Statistics","text":"first example inspired blog post, accomplish similar task using htmlTable package. uses melanoma data set boot package illustration, copied code used prepare data: first attempt, can following: Note table1 package uses familiar formula interface, variables include table separated ‘+’ symbols, “stratification” variable (creates columns) appears right “conditioning” symbol ‘|’, data argument specifies data.frame contains variables formula. don’t nice labels variables categories, doesn’t look great. improve things, can create factors descriptive labels categorical variables (sex ulcer), label variable way want, specify units continuous variables (age thickness). also specify overall column labeled “Total” positioned left, add caption footnote: Basic stats ᵃ Also known Breslow thickness looks better, still quite original blog post: two “Death” strata (Melanoma Non-melanoma) grouped together common heading; continuous variables Age Thickness show Means (SD) (±), Median [Min, Max] like table1 default output; values displayed two significant digits rather three. achieve result, need customize output , case involves using slightly complicated “default” (.e. non-formula) interface table1. First, set labels differently, using list: Next, set “strata”, column, list data.frames, order want displayed: Finally, can customize contents using custom renderers. custom render can function take vector first argument return (named) character vector. also simpler way customize table contents using abbreviated code syntax instead render function, allows less control rounding (see ). , example, specify render functions continuous categorical variables follows: result: Basic stats ᵃ Also known Breslow thickness now looking pretty similar original blog post, admittedly still differences: sexes inverted (original blog post got wrong); added units continuous variables; include number individuals column column heading; percentages different, think add 100% within column, original blog post add 100% along row (except Total column, adds 100% within column). last point contentious. version, easier compare different types outcomes respect variables like sex, original version easier compare sexes respect outcomes. However, really standard application kinds tables (least one mind). Usually, columns represent exposure treatment groups, outcomes, want compare groups respect distribution baseline characteristics, purpose percentages add 100% within columns makes sense. Let’s continue example nature, using simulated data.","code":"library(boot)   melanoma2 <- melanoma   # Factor the basic variables that # we're interested in melanoma2$status <-    factor(melanoma2$status,           levels=c(2,1,3),          labels=c(\"Alive\", # Reference                   \"Melanoma death\",                    \"Non-melanoma death\")) table1(~ factor(sex) + age + factor(ulcer) + thickness | status, data=melanoma2) melanoma2$sex <-    factor(melanoma2$sex, levels=c(1,0),          labels=c(\"Male\",                    \"Female\"))   melanoma2$ulcer <-    factor(melanoma2$ulcer, levels=c(0,1),          labels=c(\"Absent\",                    \"Present\"))  label(melanoma2$sex)       <- \"Sex\" label(melanoma2$age)       <- \"Age\" label(melanoma2$ulcer)     <- \"Ulceration\" label(melanoma2$thickness) <- \"Thicknessᵃ\"  units(melanoma2$age)       <- \"years\" units(melanoma2$thickness) <- \"mm\"  caption  <- \"Basic stats\" footnote <- \"ᵃ Also known as Breslow thickness\"  table1(~ sex + age + ulcer + thickness | status, data=melanoma2,     overall=c(left=\"Total\"), caption=caption, footnote=footnote) labels <- list(     variables=list(sex=\"Sex\",                    age=\"Age (years)\",                    ulcer=\"Ulceration\",                    thickness=\"Thicknessᵃ (mm)\"),     groups=list(\"\", \"\", \"Death\"))  # Remove the word \"death\" from the labels, since it now appears above levels(melanoma2$status) <- c(\"Alive\", \"Melanoma\", \"Non-melanoma\") strata <- c(list(Total=melanoma2), split(melanoma2, melanoma2$status)) my.render.cont <- function(x) {     with(stats.apply.rounding(stats.default(x), digits=2), c(\"\",         \"Mean (SD)\"=sprintf(\"%s (&plusmn; %s)\", MEAN, SD))) } my.render.cat <- function(x) {     c(\"\", sapply(stats.default(x), function(y) with(y,         sprintf(\"%d (%0.0f %%)\", FREQ, PCT)))) } table1(strata, labels, groupspan=c(1, 1, 2), caption=caption, footnote=footnote,        render.continuous=my.render.cont, render.categorical=my.render.cat)"},{"path":"/articles/table1-examples.html","id":"example-2","dir":"Articles","previous_headings":"","what":"Example 2","title":"Using the table1 Package to Create HTML Tables of Descriptive Statistics","text":"second example, use simulated data. imagine clinical trial subjects randomized 2:1 ratio receive active treatment placebo. simplicity, consider three baseline characteristics: age, sex weight. Using default settings, obtain table: Note contains missing values (weight), continuous categorical, reported distinct category (count percent). “Overall” column can easily removed (relabeled): can also stratification two variables, case nested. example, see treatment group split sex: , switch order: , stratification: Finally, may consider something bit complicated, using default (.e., non-formula) interface. Suppose instead simply assigned placebo active treatment, actually two doses treatment randomized, 5 mg 10 mg, want columns dose level separately, well treated subjects.","code":"f <- function(x, n, ...) factor(sample(x, n, replace=T, ...), levels=x) set.seed(427)  n <- 146 dat <- data.frame(id=1:n) dat$treat <- f(c(\"Placebo\", \"Treated\"), n, prob=c(1, 2)) # 2:1 randomization dat$age   <- sample(18:65, n, replace=TRUE) dat$sex   <- f(c(\"Female\", \"Male\"), n, prob=c(.6, .4))  # 60% female dat$wt    <- round(exp(rnorm(n, log(70), 0.23)), 1)  # Add some missing data dat$wt[sample.int(n, 5)] <- NA  label(dat$age)   <- \"Age\" label(dat$sex)   <- \"Sex\" label(dat$wt)    <- \"Weight\" label(dat$treat) <- \"Treatment Group\"  units(dat$age)   <- \"years\" units(dat$wt)    <- \"kg\" table1(~ age + sex + wt | treat, data=dat) table1(~ age + sex + wt | treat, data=dat, overall=F) table1(~ age + wt | treat*sex, data=dat) table1(~ age + wt | sex*treat, data=dat) table1(~ treat + age + sex + wt, data=dat) dat$dose <- (dat$treat != \"Placebo\")*sample(1:2, n, replace=T) dat$dose <- factor(dat$dose, labels=c(\"Placebo\", \"5 mg\", \"10 mg\"))  strata <- c(split(dat, dat$dose), list(\"All treated\"=subset(dat, treat==\"Treated\")), list(Overall=dat))  labels <- list(     variables=list(age=render.varlabel(dat$age),                    sex=render.varlabel(dat$sex),                    wt=render.varlabel(dat$wt)),     groups=list(\"\", \"Treated\", \"\"))  table1(strata, labels, groupspan=c(1, 3, 1))"},{"path":"/articles/table1-examples.html","id":"using-abbreviated-code-to-specify-a-custom-renderer","dir":"Articles","previous_headings":"","what":"Using abbreviated code to specify a custom renderer","title":"Using the table1 Package to Create HTML Tables of Descriptive Statistics","text":"Suppose continuous variables, want display percent coefficient variation (CV%) instead standard deviation (SD). also want display geometric mean geometric coefficient variation. already discussed custom render functions used accomplish , simpler alternative use abbreviated code. character string contains certain keywords substituted computed values table output. list recognized keywords comes output stats.default function includes: N, NMISS, MEAN, SD, CV, GMEAN, GCV, MEDIAN, MIN, MAX, IQR, Q1, Q2, Q3, T1, T2, FREQ, PCT. Keyword matching case insensitive, text keywords left untouched. can specify vector character strings, case result displayed row table. can use named vector specify labels row; dot (‘.’) can used indicate abbreviated code string used row label. Significant digits can controlled using digits argument (default: 3). continuation example previous section produces desired result:","code":"table1(strata, labels, groupspan=c(1, 3, 1),        render.continuous=c(.=\"Mean (CV%)\", .=\"Median [Min, Max]\",                            \"Geo. mean (Geo. CV%)\"=\"GMEAN (GCV%)\"))"},{"path":"/articles/table1-examples.html","id":"displaying-different-statistics-for-different-variables","dir":"Articles","previous_headings":"","what":"Displaying different statistics for different variables","title":"Using the table1 Package to Create HTML Tables of Descriptive Statistics","text":"Suppose desired show median range age, mean standard deviation weight. can achieved using custom render function follows: Note instead overriding render.continuous render.categorical separately, can override render handles . render function gets name variable second argument, also accept ... capture arguments passed . Note also function parse.abbrev.render.code can used turn abbreviated code corresponding render function.","code":"rndr <- function(x, name, ...) {     if (!is.numeric(x)) return(render.categorical.default(x))     what <- switch(name,         age = \"Median [Min, Max]\",         wt  = \"Mean (SD)\")     parse.abbrev.render.code(c(\"\", what))(x) }  table1(~ age + sex + wt | treat, data=dat,        render=rndr)"},{"path":"/articles/table1-examples.html","id":"changing-the-tables-appearance","dir":"Articles","previous_headings":"","what":"Changing the table’s appearance","title":"Using the table1 Package to Create HTML Tables of Descriptive Statistics","text":"default style table1 uses Arial font, resembles booktabs style commonly used LaTeX. default style ugly, inevitably desire customize visual appearance table (fonts, colors, gridlines, etc). package provides limited number built-options changing style, customization can achieved R Markdown documents using CSS (see ).","code":""},{"path":"/articles/table1-examples.html","id":"using-built-in-styles","dir":"Articles","previous_headings":"Changing the table’s appearance","what":"Using built-in styles","title":"Using the table1 Package to Create HTML Tables of Descriptive Statistics","text":"package includes limited number built-styles including: zebra: alternating shaded unshaded rows (zebra stripes) grid: show grid lines shade: shade header row(s) gray times: use serif font center: center columns, including first contains row labels styles can selected using topclass argument table1. examples follow: Note style name needs preceded prefix Rtable1-. Multiple styles can applied combination separating space.","code":"table1(~ age + sex + wt | treat, data=dat, topclass=\"Rtable1-zebra\") table1(~ age + sex + wt | treat, data=dat, topclass=\"Rtable1-grid\") table1(~ age + sex + wt | treat, data=dat, topclass=\"Rtable1-grid Rtable1-shade Rtable1-times\")"},{"path":"/articles/table1-examples.html","id":"using-custom-css-to-control-the-tables-appearance","dir":"Articles","previous_headings":"Changing the table’s appearance","what":"Using custom CSS to control the table’s appearance","title":"Using the table1 Package to Create HTML Tables of Descriptive Statistics","text":"customization table appearance possible R Markdown documents, using custom CSS specified document’s YAML header. examples, include style.css output, YAML header contain following: CSS allows fine control appearance different elements table. examples, style.css contains following definitions: output follows: (Note: alternative redefining default CSS class Rtable1, different custom CSS class name used, topclass argument used select .)","code":"output:    html_document:     css: style.css table.Rtable1 {     font-family: \"Lucida Console\", Monaco, monospace;     border-collapse: collapse;     font-size: 9pt; } .Rtable1 th {     background-color: rgb(0, 100, 164);     color: white; } .Rtable1 .firstrow, .Rtable1 .firstrow ~ td {     border-top: 1pt solid black; } .Rtable1 td.rowlabel {     color: DarkCyan;     font-style: italic; } .Rtable1 td.firstrow.rowlabel {     background-color: yellow;     color: red;     font-size: 12pt; }"},{"path":"/articles/table1-examples.html","id":"extra-columns","dir":"Articles","previous_headings":"","what":"Extra columns","title":"Using the table1 Package to Create HTML Tables of Descriptive Statistics","text":"Sometimes, may desired add extra columns table, descriptive statistics. can accomplished using extra.col option. contents extra columns can anything can computed data, making extremely flexible approach. usual, flexibility comes cost, namely form effort/code achieve desired result.","code":""},{"path":"/articles/table1-examples.html","id":"example-a-column-of-p-values","dir":"Articles","previous_headings":"Extra columns","what":"Example: a column of p-values","title":"Using the table1 Package to Create HTML Tables of Descriptive Statistics","text":"user asked possible add column table showing p-value associated univariate test differences variable across strata. can accomplished using extra.col feature. following example uses lalonde data MatchIt package. dataset column treat contains value 0 “Treatment” 1 “Control”; used stratification. example, chi-square test independence used categorical variables, t-test continuous variables (tests used desired, just illustration purposes). First, assign factor levels, labels units variables interest. Next, create function compute p-value continuous categorical variables. Note function expects specific input, namely list 2 components corresponding 2 strata “Treatment” “Control” lalonde data. 2 elements list , use overall=F table1 (otherwise, third element list corresponding overall column). Thus, function sense specifically tailored examples, need adapted situations (2 strata, t-test work). Now, supply function extra.col list argument table1 name P-value, appear column label (heading). Admittedly, simple setting flag, advantage totally flexible.","code":"library(MatchIt)  data(lalonde)  lalonde$treat    <- factor(lalonde$treat, levels=c(0, 1), labels=c(\"Control\", \"Treatment\")) lalonde$married  <- as.logical(lalonde$married == 1) lalonde$nodegree <- as.logical(lalonde$nodegree == 1) lalonde$race     <- factor(lalonde$race, levels=c(\"white\", \"black\", \"hispan\"),                                          labels=c(\"White\", \"Black\", \"Hispanic\"))  label(lalonde$race)     <- \"Race\" label(lalonde$married)  <- \"Married\" label(lalonde$nodegree) <- \"No high school diploma\" label(lalonde$age)      <- \"Age\" label(lalonde$re74)     <- \"1974 Income\" label(lalonde$re75)     <- \"1975 Income\" label(lalonde$re78)     <- \"1978 Income\" units(lalonde$age)      <- \"years\" pvalue <- function(x, ...) {     # Construct vectors of data y, and groups (strata) g     y <- unlist(x)     g <- factor(rep(1:length(x), times=sapply(x, length)))     if (is.numeric(y)) {         # For numeric variables, perform a standard 2-sample t-test         p <- t.test(y ~ g)$p.value     } else {         # For categorical variables, perform a chi-squared test of independence         p <- chisq.test(table(y, g))$p.value     }     # Format the p-value, using an HTML entity for the less-than sign.     # The initial empty string places the output on the line below the variable label.     c(\"\", sub(\"<\", \"&lt;\", format.pval(p, digits=3, eps=0.001))) } table1(~ age + race + married + nodegree + re74 + re75 + re78 | treat,     data=lalonde, overall=F, extra.col=list(`P-value`=pvalue))"},{"path":"/articles/table1-examples.html","id":"transposed-table","dir":"Articles","previous_headings":"","what":"Transposed table","title":"Using the table1 Package to Create HTML Tables of Descriptive Statistics","text":"default, table produced table1 strata subgroups columns, variables rows. cases, may desirable transpose table column variables rows strata. makes sense variables continuous compact representation desired. can achieved using transpose = TRUE option. example: Default: Transposed:","code":"dat <- expand.grid(i=1:50, group=LETTERS[1:3]) dat <- cbind(dat, matrix(round(exp(rnorm(6*nrow(dat))), 1), nrow=nrow(dat))) names(dat)[3:8] <- paste0(\"V\", 1:6) table1(~ V1 + V2 + V3 + V4 + V5 + V6 | group, data=dat,        topclass=\"Rtable1-grid Rtable1-center\",        render=\"Mean (CV%)<br/>Median [Min, Max]<br/>GMean (GCV%)\") table1(~ V1 + V2 + V3 + V4 + V5 + V6 | group, data=dat,        topclass=\"Rtable1-grid Rtable1-center\",        render=\"Mean (CV%)<br/>Median [Min, Max]<br/>GMean (GCV%)\",        transpose=TRUE)"},{"path":"/articles/table1-latex.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using table1 with LaTeX and MS Word","text":"long requested feature ability use table1 rmarkdown documents render .docx (.e. Microsoft Word). Since version 1.4 table1, now possible (limitations) converting output table1() data.frame, kableExtra flextable, using functions .data.frame(), t1kable() t1flex() respectively, objects can rendered (note: data.frame (via pandoc) flextable objects can also rendered .docx format, , kableExtra ).","code":""},{"path":"/articles/table1-latex.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Using table1 with LaTeX and MS Word","text":"demonstrate using familiar example main vignette. First, can try data.frame approach: default, produce table, text output see R console. printr package loaded, however, get table default: Alternatively, can use knitr::kable() function: output bit nicer specified booktabs option, talking simple data.frame, option specify formatting (like bold text variable labels, instance). Next, can try t1kable() function, produce kableExtra object: looks bit better: uses booktabs option default, also bold variable labels. limitation multiline headers (.e. headers contain line breaks), N=XX column placed first row table, less ideal. Finally, can try using t1flex() function produce flextable object:   Placebo(N=52) Treated(N=94) Overall(N=146) Age (years)      Mean (SD) 39.2 (14.2) 40.1 (13.3) 39.8 (13.6)   Median [Min, Max] 37.5 [18.0, 65.0] 39.5 [18.0, 65.0] 39.0 [18.0, 65.0] Sex      Female 34 (65.4%) 53 (56.4%) 87 (59.6%)   Male 18 (34.6%) 41 (43.6%) 59 (40.4%) Weight (kg)      Mean (SD) 68.1 (16.3) 68.3 (16.7) 68.2 (16.5)   Median [Min, Max] 66.7 [37.5, 116] 64.9 [40.0, 119] 66.2 [37.5, 119]   Missing 2 (3.8%) 3 (3.2%) 5 (3.4%) (Note flextable output, particular font, different depending whether xelatex, lualatex pdflatex engine used, flextable emits warning pdflatex, default rmarkdown documents, used xelatex lualatex gives font options.) output less attractive opinion, less consistent typical look tables documents. spaced , doesn’t bold labels line break column headers (actually, problem common packages, t1kable() t1flex() functions deal differently flextable actually include line breaks HTML .docx output, overall best approach unclear), doesn’t use booktabs package (thickness horizontal rules different). Also, flextable places table float, whereas kableExtra leaves inline. personally use kableExtra flextable documents, fact made default output context (.e., using rmarkdown output format). big advantage flextable can render .docx format (.e. Microsoft Word), kableExtra , default output context.","code":"x <- table1(~ age + sex + wt | treat, data=dat) as.data.frame(x) ##                                  Placebo           Treated           Overall ## 1                                 (N=52)            (N=94)           (N=146) ## 2          Age (years)                                                       ## 3            Mean (SD)       39.2 (14.2)       40.1 (13.3)       39.8 (13.6) ## 4    Median [Min, Max] 37.5 [18.0, 65.0] 39.5 [18.0, 65.0] 39.0 [18.0, 65.0] ## 5                  Sex                                                       ## 6               Female        34 (65.4%)        53 (56.4%)        87 (59.6%) ## 7                 Male        18 (34.6%)        41 (43.6%)        59 (40.4%) ## 8          Weight (kg)                                                       ## 9            Mean (SD)       68.1 (16.3)       68.3 (16.7)       68.2 (16.5) ## 10   Median [Min, Max]  66.7 [37.5, 116]  64.9 [40.0, 119]  66.2 [37.5, 119] ## 11             Missing          2 (3.8%)          3 (3.2%)          5 (3.4%) library(printr, quietly=TRUE) ## Registered S3 method overwritten by 'printr': ##   method                from      ##   knit_print.data.frame rmarkdown as.data.frame(x) kable(as.data.frame(x), booktabs=TRUE) t1kable(x) t1flex(x)"},{"path":"/articles/table1-latex.html","id":"nested-groups","dir":"Articles","previous_headings":"Examples","what":"Nested groups","title":"Using table1 with LaTeX and MS Word","text":"Nested groups supported kableExtra flextable, simple data.frames. , one example kableExtra:","code":"x2 <- table1(~ age + wt | treat*sex, data=dat, overall=FALSE) t1kable(x2)"},{"path":"/articles/table1-latex.html","id":"captions-and-footnotes","dir":"Articles","previous_headings":"Examples","what":"Captions and footnotes","title":"Using table1 with LaTeX and MS Word","text":"Captions footnotes supported kableExtra flextable. example kableExtra: Test caption Alternatively, kableExtra::footnote() function can used add footnotes resulting object (function also automatic numbering, may considered advantage). Note caption used, table rendered float.","code":"x <- table1(~ age + sex + wt | treat, data=dat,     caption=\"Test caption\", footnote=\"Test footnote\") t1kable(x)"},{"path":"/articles/table1-latex.html","id":"closing-remarks","dir":"Articles","previous_headings":"","what":"Closing remarks","title":"Using table1 with LaTeX and MS Word","text":"version 1.4, now possible use table1 within documents. limitations formatting, however (looks fine, quite HTML output less flexibility control ). actual code generation handled external package (.e., knitr, kableExtra flextable). generated kableExtra flextable different, opinion kableExtra produces better result. kableExtra flextable extensive number functions can applied converted object order alter appearance table described ; refer package’s documentation complete details.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Benjamin Rich. Author, maintainer, copyright holder. Kening Jiang. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rich B (2023). table1: Tables Descriptive Statistics HTML. R package version 1.4.4, https://github.com/benjaminrich/table1.","code":"@Manual{,   title = {table1: Tables of Descriptive Statistics in HTML},   author = {Benjamin Rich},   year = {2023},   note = {R package version 1.4.4},   url = {https://github.com/benjaminrich/table1}, }"},{"path":[]},{"path":"/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Tables of Descriptive Statistics in HTML","text":"R package generating tables descriptive statistics HTML. Table 1 commonly used biomedical research describe characteristics participants study often first table published article. Table 1 displays descriptive statistics (e.g., mean, standard deviation) characteristics overall outcome exposure variable interest sometimes includes p-value test whether characteristic significantly differ outcome exposure variable interest. Read Table 1","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tables of Descriptive Statistics in HTML","text":"install CRAN: install latest development version directly GitHub:","code":"install.packages(\"table1\") require(devtools) devtools::install_github(\"benjaminrich/table1\")"},{"path":"/index.html","id":"information","dir":"","previous_headings":"","what":"Information","title":"Tables of Descriptive Statistics in HTML","text":"Author, maintainer, copyright holder: Benjamin Rich, Github Contributor: Kening Jiang, Website","code":""},{"path":"/index.html","id":"customization-of-the-website","dir":"","previous_headings":"","what":"Customization of the website","title":"Tables of Descriptive Statistics in HTML","text":"Customize readme header:  package name navbar removed strip_header: true. Customize author information sidebar, left part side footer, author page:  Add Kening jiang contributor DESCRIPTION file change display authors modify text author names. Theming:  Change (1) bootswatch, (2) theme, (3) bslib settings override defalut theme. Customize Navbar:  Change style layout navigation bar changing (1) structure (2) component articles menu updated include original vignettes developer example analysis ’s newly added. Customize sidebar:  Update sidebar include citation, authors, links license DESCRIPTION file updated correspondingly.","code":""},{"path":"/index.html","id":"functions","dir":"","previous_headings":"","what":"Functions","title":"Tables of Descriptive Statistics in HTML","text":"list exported functions also available reference tab. .data.frame() - Convert table1 object data.frame. eqcut() eqcut.default.labeling() - Cut continuous variable equal-sized groups. knit_print() - Method printing knitr context. label() label<-() setLabel() .label() - Label attribute. parse.abbrev.render.code() - Parse abbreviated code rendering table output. print() - Print table1 object. render.categorical.default() - Render categorical values table output. render.continuous.default() - Render continuous values table output. render.default() - Render values table output. render.missing.default() - Render missing values table output. render.varlabel() - Render variable labels table output. signif_pad() round_pad() - Round numbers 0-padding. stats.apply.rounding() - Apply rounding basic descriptive statistics. stats.default() - Compute basic descriptive statistics. subsetp() - Subset function preserves column attributes. t1flex() - Convert table1 object flextable. t1kable() - Convert table1 object kabelExtra. t1read() - Read augment data extended metadata attributes table.rows() table.data() - Convert HTML table rows. table1() - Generate HTML table descriptive statistics. units() units<-() .units() - Units attribute. update_html() - Update HTML.","code":""},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Tables of Descriptive Statistics in HTML","text":"example, use data Mayo Clinic trial primary biliary cirrhosis (PBC) liver found survival package.","code":"require(table1) require(survival)  dat <- subset(survival::pbc, !is.na(trt))  # Exclude subjects not randomized  dat$trt     <- factor(dat$trt, levels=1:2, labels=c(\"D-penicillamine\", \"Placebo\")) dat$sex     <- factor(dat$sex, levels=c(\"m\", \"f\"), labels=c(\"Male\", \"Female\")) dat$stage   <- factor(dat$stage, levels=1:4, labels=paste(\"Stage\", 1:4)) dat$edema   <- factor(dat$edema, levels=c(0, 0.5, 1),                       labels=c(\"No edema\",                                \"Untreated or successfully treated\",                                \"Edema despite diuretic therapy\")) dat$spiders <- as.logical(dat$spiders) dat$hepato  <- as.logical(dat$hepato) dat$ascites <- as.logical(dat$ascites)  label(dat$age)      <- \"Age (y)\" label(dat$sex)      <- \"Sex\" label(dat$stage)    <- \"Histologic stage of disease\" label(dat$edema)    <- \"Edema status\" label(dat$spiders)  <- \"Blood vessel malformations in the skin\" label(dat$hepato)   <- \"Presence of hepatomegaly or enlarged liver\" label(dat$ascites)  <- \"Presence of ascites\" label(dat$platelet) <- \"Platelet count (&times; 10<sup>9<\/sup> per liter)\" label(dat$protime)  <- \"Standardised blood clotting time\" label(dat$albumin)  <- \"Serum albumin (g/dL)\" label(dat$alk.phos) <- \"Alkaline phosphotase (U/L)\" label(dat$ast)      <- \"Aspartate aminotransferase (U/mL)\" label(dat$bili)     <- \"Serum bilirubin (mg/dL)\" label(dat$chol)     <- \"Serum cholesterol (mg/dL)\" label(dat$copper)   <- \"Urine copper (&mu;g/day)\" label(dat$trig)     <- \"Triglycerides (mg/dL)\"  table1(~ age + sex + stage + edema + spiders + hepato + ascites +          platelet + protime + albumin + alk.phos + ast + bili + chol +          copper + trig | trt, data=dat)"},{"path":"/reference/as.data.frame.table1.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a table1 object to a data.frame. — as.data.frame.table1","title":"Convert a table1 object to a data.frame. — as.data.frame.table1","text":"Convert table1 object data.frame.","code":""},{"path":"/reference/as.data.frame.table1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a table1 object to a data.frame. — as.data.frame.table1","text":"","code":"# S3 method for table1 as.data.frame(x, ...)"},{"path":"/reference/as.data.frame.table1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a table1 object to a data.frame. — as.data.frame.table1","text":"x object returned table1. ... Ignored.","code":""},{"path":"/reference/as.data.frame.table1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a table1 object to a data.frame. — as.data.frame.table1","text":"data.frame.","code":""},{"path":"/reference/eqcut.html","id":null,"dir":"Reference","previous_headings":"","what":"Cut a continuous variable into equal-sized groups. — eqcut","title":"Cut a continuous variable into equal-sized groups. — eqcut","text":"Cut continuous variable equal-sized groups.","code":""},{"path":"/reference/eqcut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cut a continuous variable into equal-sized groups. — eqcut","text":"","code":"eqcut(   x,   ngroups,   labeling = eqcut.default.labeling,   withhold = NULL,   varlabel = if (has.label(x)) label(x) else deparse(substitute(x)),   quantile.type = 7,   right = FALSE,   ... )  eqcut.default.labeling(x, xcat, which, what, from, to, ...)"},{"path":"/reference/eqcut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cut a continuous variable into equal-sized groups. — eqcut","text":"x numeric vector. ngroups number groups desired. labeling function produces category labels (see Details). withhold named list logical vectors (see Details). varlabel character string used label x, NULL. quantile.type integer 1 9, passed type argument function quantile. right intervals right-closed? (passed cut). ... arguments passed function labeling. xcat factor returned cut. , Character vectors labeling categories appropriate way (see Examples). , Numeric vectors giving ranges covered categories x.","code":""},{"path":"/reference/eqcut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cut a continuous variable into equal-sized groups. — eqcut","text":"factor length x. ngroups levels plus one additional level element withhold.","code":""},{"path":"/reference/eqcut.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cut a continuous variable into equal-sized groups. — eqcut","text":"function labeling must signature function(x, xcat, , , , , ...) produces character vector factor levels. See example. withhold list can used x contains special values considered calculation quantiles used create ngroups categories. special values given label corresponds name corresponding list element. See example.","code":""},{"path":"/reference/eqcut.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Cut a continuous variable into equal-sized groups. — eqcut","text":"eqcut.default.labeling(): default labeling function.","code":""},{"path":[]},{"path":"/reference/eqcut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cut a continuous variable into equal-sized groups. — eqcut","text":"","code":"x <- sample(100) table(eqcut(x, 2)) #>  #> Below median x: [1.00,50.5)  Above median x: [50.5,100]  #>                          50                          50  table(eqcut(x, 3)) #>  #> 1st tertile of x: [1.00,34.0) 2nd tertile of x: [34.0,67.0)  #>                            33                            33  #>  3rd tertile of x: [67.0,100]  #>                            34  table(eqcut(x, 4)) #>  #> 1st quartile of x: [1.00,25.8) 2nd quartile of x: [25.8,50.5)  #>                             25                             25  #> 3rd quartile of x: [50.5,75.3)  4th quartile of x: [75.3,100]  #>                             25                             25  table(eqcut(x, 5)) #>  #> 1st quintile of x: [1.00,20.8) 2nd quintile of x: [20.8,40.6)  #>                             20                             20  #> 3rd quintile of x: [40.6,60.4) 4th quintile of x: [60.4,80.2)  #>                             20                             20  #>  5th quintile of x: [80.2,100]  #>                             20  table(eqcut(x, 6)) #>  #> 1st sextile of x: [1.00,17.5) 2nd sextile of x: [17.5,34.0)  #>                            17                            16  #> 3rd sextile of x: [34.0,50.5) 4th sextile of x: [50.5,67.0)  #>                            17                            16  #> 5th sextile of x: [67.0,83.5)  6th sextile of x: [83.5,100]  #>                            17                            17  table(eqcut(x, 7)) #>  #> 1st septile of x: [1.00,15.1) 2nd septile of x: [15.1,29.3)  #>                            15                            14  #> 3rd septile of x: [29.3,43.4) 4th septile of x: [43.4,57.6)  #>                            14                            14  #> 5th septile of x: [57.6,71.7) 6th septile of x: [71.7,85.9)  #>                            14                            14  #>  7th septile of x: [85.9,100]  #>                            15  table(eqcut(x, 8)) #>  #> 1st octile of x: [1.00,13.4) 2nd octile of x: [13.4,25.8)  #>                           13                           12  #> 3rd octile of x: [25.8,38.1) 4th octile of x: [38.1,50.5)  #>                           13                           12  #> 5th octile of x: [50.5,62.9) 6th octile of x: [62.9,75.3)  #>                           12                           13  #> 7th octile of x: [75.3,87.6)  8th octile of x: [87.6,100]  #>                           12                           13   # An example of using eqcut in a table with custom labeling function. dat <- expand.grid(id=1:100, sex=c(\"Male\", \"Female\"), treat=c(\"Treated\", \"Placebo\")) dat$age <- runif(nrow(dat), 18, 50) dat$wt <- exp(rnorm(nrow(dat), log(75 + 10*(dat$sex==\"Male\")), 0.2)) dat$auc <- ifelse(dat$treat==\"Placebo\", NA, exp(rnorm(nrow(dat), log(1000), 0.34))) dat$auc[3] <- NA  # Add a missing value  label(dat$sex) <- \"Sex\" label(dat$age) <- \"Age\" label(dat$wt)  <- \"Weight\" label(dat$auc) <- \"AUC\" units(dat$age) <- \"y\" units(dat$wt)  <- \"kg\" units(dat$auc) <- \"ng.h/mL\"  w <- list(Placebo=(dat$treat==\"Placebo\"), Excluded=is.na(dat$auc)) f <- function(x, xcat, which, what, from, to, ...) {    what <- sub(\"of \", \"of<br/>\", what)    sprintf(\"%s %s<br/>&ge;%s to &lt;%s\",        which, what, signif_pad(from, 3, FALSE), signif_pad(to, 3, FALSE)) } table1(~ sex + age + wt | eqcut(auc, 3, f, w), data=dat)"},{"path":"/reference/knit_print.table1.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for printing in a knitr context. — knit_print.table1","title":"Method for printing in a knitr context. — knit_print.table1","text":"Method printing knitr context.","code":""},{"path":"/reference/knit_print.table1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for printing in a knitr context. — knit_print.table1","text":"","code":"# S3 method for table1 knit_print(x, ...)"},{"path":"/reference/knit_print.table1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for printing in a knitr context. — knit_print.table1","text":"x object returned table1. ... arguments passed knitr::knit_print.","code":""},{"path":"/reference/knit_print.table1.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Method for printing in a knitr context. — knit_print.table1","text":"target HTML, usual internal formatting applied; otherwise, fall back `data.frame`.","code":""},{"path":"/reference/label.html","id":null,"dir":"Reference","previous_headings":"","what":"Label attribute. — label","title":"Label attribute. — label","text":"Label attribute.","code":""},{"path":"/reference/label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label attribute. — label","text":"","code":"label(x)  label(x) <- value  setLabel(x, value)  has.label(x)"},{"path":"/reference/label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label attribute. — label","text":"x object. value character specifying label.","code":""},{"path":"/reference/label.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Label attribute. — label","text":"label(x) <- value: Set label attribute. setLabel(): Set label attribute. .label(): Check label attribute.","code":""},{"path":"/reference/label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Label attribute. — label","text":"","code":"x <- 1:10 label(x) <- \"Foo\" x <- setLabel(x, \"Foo\") # Alternative syntax has.label(x) #> [1] TRUE label(x) #> [1] \"Foo\""},{"path":"/reference/parse.abbrev.render.code.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse abbreviated code for rendering table output. — parse.abbrev.render.code","title":"Parse abbreviated code for rendering table output. — parse.abbrev.render.code","text":"Parse abbreviated code rendering table output.","code":""},{"path":"/reference/parse.abbrev.render.code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse abbreviated code for rendering table output. — parse.abbrev.render.code","text":"","code":"parse.abbrev.render.code(code, ...)"},{"path":"/reference/parse.abbrev.render.code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse abbreviated code for rendering table output. — parse.abbrev.render.code","text":"code character vector specifying statistics display abbreviated code. See Details. ... arguments, passed stats.apply.rounding.","code":""},{"path":"/reference/parse.abbrev.render.code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse abbreviated code for rendering table output. — parse.abbrev.render.code","text":"function takes single argument returns character vector.","code":""},{"path":"/reference/parse.abbrev.render.code.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse abbreviated code for rendering table output. — parse.abbrev.render.code","text":"abbreviated code, words N, NMISS, MEAN, SD, MIN, MEDIAN, MAX, IQR, CV, GMEAN, GSD, GCV, FREQ PCT substituted respective values (see stats.default). substitution case insensitive, substituted values rounded appropriately (see stats.apply.rounding). text left unchanged. code can vector, case element displayed row table. names code used row labels; names present, code used unless code length 1, case label used (numeric variables , categorical variables always labeled class label). special name '.' also indicates code used row label.","code":""},{"path":"/reference/parse.abbrev.render.code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse abbreviated code for rendering table output. — parse.abbrev.render.code","text":"","code":"if (FALSE) { x <- round(exp(rnorm(100, log(20), 1)), 2) stats.default(x) f <- parse.abbrev.render.code(c(\"Mean (SD)\", \"Median [Min, Max]\"), 3) f(x) f2 <- parse.abbrev.render.code(c(\"Geo. Mean (Geo. CV%)\" = \"GMean (GCV%)\"), 3) f2(x) f3 <- parse.abbrev.render.code(c(\"Mean (SD)\"), 3) f3(x)  x <- sample(c(\"Male\", \"Female\"), 30, replace=T) stats.default(x) f <- parse.abbrev.render.code(\"Freq (Pct%)\") f(x) }"},{"path":"/reference/print.table1.html","id":null,"dir":"Reference","previous_headings":"","what":"Print table1 object. — print.table1","title":"Print table1 object. — print.table1","text":"Print table1 object.","code":""},{"path":"/reference/print.table1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print table1 object. — print.table1","text":"","code":"# S3 method for table1 print(x, ...)"},{"path":"/reference/print.table1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print table1 object. — print.table1","text":"x object returned table1. ... arguments passed print methods.","code":""},{"path":"/reference/print.table1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print table1 object. — print.table1","text":"Returns x invisibly.","code":""},{"path":"/reference/print.table1.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print table1 object. — print.table1","text":"interactive context, rendered table displayed web browser. Otherwise, HTML code printed text.","code":""},{"path":"/reference/render.categorical.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Render categorical values for table output. — render.categorical.default","title":"Render categorical values for table output. — render.categorical.default","text":"Called table1 default render categorical (.e. factor, character logical) values displaying table.","code":""},{"path":"/reference/render.categorical.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render categorical values for table output. — render.categorical.default","text":"","code":"render.categorical.default(x, ..., na.is.category = TRUE)"},{"path":"/reference/render.categorical.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render categorical values for table output. — render.categorical.default","text":"x vector type factor, character logical. ... arguments, passed stats.apply.rounding. na..category Include missing values denominator calculating percentages (default) omit .","code":""},{"path":"/reference/render.categorical.default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render categorical values for table output. — render.categorical.default","text":"character vector. element displayed separate cell table. names vector labels use table. However, first names empty replaced name variable. Empty strings allowed result empty table cells.","code":""},{"path":"/reference/render.categorical.default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render categorical values for table output. — render.categorical.default","text":"","code":"y <- factor(sample(0:1, 99, replace=TRUE), labels=c(\"Female\", \"Male\")) y[1:10] <- NA render.categorical.default(y) #>                    Female         Male  #>           \"\" \"52 (52.5%)\" \"37 (37.4%)\""},{"path":"/reference/render.continuous.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Render continuous values for table output. — render.continuous.default","title":"Render continuous values for table output. — render.continuous.default","text":"Called table1 default render continuous (.e. numeric) values displaying table.","code":""},{"path":"/reference/render.continuous.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render continuous values for table output. — render.continuous.default","text":"","code":"render.continuous.default(x, ...)"},{"path":"/reference/render.continuous.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render continuous values for table output. — render.continuous.default","text":"x numeric vector. ... arguments, passed stats.apply.rounding.","code":""},{"path":"/reference/render.continuous.default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render continuous values for table output. — render.continuous.default","text":"character vector. element displayed separate cell table. names vector labels use table. However, first names empty replaced name variable. Empty strings allowed result empty table cells.","code":""},{"path":"/reference/render.continuous.default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render continuous values for table output. — render.continuous.default","text":"","code":"x <- exp(rnorm(100, 1, 1)) render.continuous.default(x) #>                                   Mean (SD)     Median [Min, Max]  #>                    \"\"         \"4.48 (7.31)\" \"2.83 [0.0853, 67.7]\""},{"path":"/reference/render.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Render values for table output. — render.default","title":"Render values for table output. — render.default","text":"Called table1 default render values displaying table. function forwards call separate functions rendering continuous, categorical missing values. idea functions can overridden customize table output.","code":""},{"path":"/reference/render.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render values for table output. — render.default","text":"","code":"render.default(   x,   name,   missing = any(is.na(x)),   transpose = F,   render.empty = \"NA\",   render.continuous = render.continuous.default,   render.categorical = render.categorical.default,   render.missing = render.missing.default,   ... )"},{"path":"/reference/render.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render values for table output. — render.default","text":"x vector numeric, factor, character logical values. name Name variable rendered (ignored). missing missing values included? transpose Logical indicating whether table transposed. render.empty character return x empty. render.continuous function render continuous (.e. numeric) values. Can also character string, case passed parse.abbrev.render.code. render.categorical function render categorical (.e. factor, character logical) values. Can also character string, case passed parse.abbrev.render.code. render.missing function render missing (.e. NA) values. Can also character string, case passed parse.abbrev.render.code. Set NULL ignore missing values. ... arguments, passed stats.apply.rounding.","code":""},{"path":"/reference/render.default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render values for table output. — render.default","text":"character vector. element displayed separate cell table. names vector labels use table. However, first names empty replaced name variable. Empty strings allowed result empty table cells.","code":""},{"path":"/reference/render.default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render values for table output. — render.default","text":"","code":"x <- exp(rnorm(100, 1, 1)) render.default(x) #>                                 Mean (SD)    Median [Min, Max]  #>                   \"\"        \"4.90 (7.51)\" \"3.21 [0.241, 59.0]\"  render.default(x, TRUE) #>                                 Mean (SD)    Median [Min, Max]  #>                   \"\"        \"4.90 (7.51)\" \"3.21 [0.241, 59.0]\"   y <- factor(sample(0:1, 99, replace=TRUE), labels=c(\"Female\", \"Male\")) y[1:10] <- NA render.default(y) #>                    Female         Male      Missing  #>           \"\" \"44 (44.4%)\" \"45 (45.5%)\" \"10 (10.1%)\""},{"path":"/reference/render.missing.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Render missing values for table output. — render.missing.default","title":"Render missing values for table output. — render.missing.default","text":"Called table1 default render missing (.e. NA) values displaying table.","code":""},{"path":"/reference/render.missing.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render missing values for table output. — render.missing.default","text":"","code":"render.missing.default(x, ...)"},{"path":"/reference/render.missing.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render missing values for table output. — render.missing.default","text":"x vector. ... arguments, passed stats.apply.rounding.","code":""},{"path":"/reference/render.missing.default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render missing values for table output. — render.missing.default","text":"character vector. element displayed separate cell table. names vector labels use table. Empty strings allowed result empty table cells.","code":""},{"path":"/reference/render.missing.default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render missing values for table output. — render.missing.default","text":"","code":"y <- factor(sample(0:1, 99, replace=TRUE), labels=c(\"Female\", \"Male\")) y[1:10] <- NA render.missing.default(y) #>      Missing  #> \"10 (10.1%)\""},{"path":"/reference/render.strat.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Render strata labels for table output. — render.strat.default","title":"Render strata labels for table output. — render.strat.default","text":"Called table1.formula render strata labels displaying table.","code":""},{"path":"/reference/render.strat.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render strata labels for table output. — render.strat.default","text":"","code":"render.strat.default(label, n, transpose = F)"},{"path":"/reference/render.strat.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render strata labels for table output. — render.strat.default","text":"label character vector containing labels. n numeric vector containing sizes.","code":""},{"path":"/reference/render.strat.default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render strata labels for table output. — render.strat.default","text":"character, may contain HTML markup.","code":""},{"path":"/reference/render.varlabel.html","id":null,"dir":"Reference","previous_headings":"","what":"Render variable labels for table output. — render.varlabel","title":"Render variable labels for table output. — render.varlabel","text":"Called table1.formula default render variable labels displaying table.","code":""},{"path":"/reference/render.varlabel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render variable labels for table output. — render.varlabel","text":"","code":"render.varlabel(x, transpose = F)"},{"path":"/reference/render.varlabel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render variable labels for table output. — render.varlabel","text":"x vector, usually label (appropriate) unit attributes. transpose Logical indicating whether table transposed.","code":""},{"path":"/reference/render.varlabel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render variable labels for table output. — render.varlabel","text":"character, may contain HTML markup.","code":""},{"path":"/reference/render.varlabel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render variable labels for table output. — render.varlabel","text":"","code":"x <- exp(rnorm(100, 1, 1)) label(x) <- \"Weight\" units(x) <- \"kg\" render.varlabel(x) #> [1] \"Weight (kg)\" #> attr(,\"html\") #> [1] \"<span class='varlabel'>Weight<span class='varunits'> (kg)<\/span><\/span>\"  y <- factor(sample(0:1, 99, replace=TRUE), labels=c(\"Female\", \"Male\")) y[1:10] <- NA label(y) <- \"Sex\" render.varlabel(y) #> [1] \"Sex\" #> attr(,\"html\") #> [1] \"<span class='varlabel'>Sex<\/span>\""},{"path":"/reference/signif_pad.html","id":null,"dir":"Reference","previous_headings":"","what":"Round numbers with 0-padding. — signif_pad","title":"Round numbers with 0-padding. — signif_pad","text":"Utility functions round numbers, similar base functions signif round, resulting character representations keep zeros right edge significant.","code":""},{"path":"/reference/signif_pad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round numbers with 0-padding. — signif_pad","text":"","code":"signif_pad(x, digits = 3, round.integers = TRUE, round5up = TRUE, dec, ...)  round_pad(x, digits = 2, round5up = TRUE, dec, ...)"},{"path":"/reference/signif_pad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round numbers with 0-padding. — signif_pad","text":"x numeric vector. digits integer specifying number significant digits keep (signif_pad) number digits decimal point (round_pad). round.integers rounding limited digits right decimal point? round5up numbers 5 last digit always rounded ? standard R approach \"go even digit\" (IEC 60559 standard, see round), softwares (e.g. SAS, Excel) always round . dec character symbol use decimal mark (locale specific). [Deprecated; use decimal.mark instead] ... options, passed formatC (used internally). options work, might useful (e.g. big.mark, decimal.mark).","code":""},{"path":"/reference/signif_pad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round numbers with 0-padding. — signif_pad","text":"character vector containing rounded numbers.","code":""},{"path":[]},{"path":"/reference/signif_pad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round numbers with 0-padding. — signif_pad","text":"","code":"x <- c(0.9001, 12345, 1.2, 1., 0.1, 0.00001 , 1e5) signif_pad(x, digits=3) #> [1] \"0.900\"     \"12300\"     \"1.20\"      \"1.00\"      \"0.100\"     \"0.0000100\" #> [7] \"100000\"    signif_pad(x, digits=3, round.integers=TRUE) #> [1] \"0.900\"     \"12300\"     \"1.20\"      \"1.00\"      \"0.100\"     \"0.0000100\" #> [7] \"100000\"     # Compare: as.character(signif(x, digits=3)) #> [1] \"0.9\"   \"12300\" \"1.2\"   \"1\"     \"0.1\"   \"1e-05\" \"1e+05\" format(x, digits=3, nsmall=3) #> [1] \"9.00e-01\" \"1.23e+04\" \"1.20e+00\" \"1.00e+00\" \"1.00e-01\" \"1.00e-05\" \"1.00e+05\" prettyNum(x, digits=3, drop0trailing=TRUE) #> [1] \"0.9\"   \"12345\" \"1.2\"   \"1\"     \"0.1\"   \"1e-05\" \"1e+05\" prettyNum(x, digits=3, drop0trailing=FALSE) #> [1] \"0.9\"   \"12345\" \"1.2\"   \"1\"     \"0.1\"   \"1e-05\" \"1e+05\"  # This is very close. formatC(x, format=\"fg\", flag=\"#\", digits=3)  #> [1] \"0.900\"     \"12345.\"    \"1.20\"      \"1.00\"      \"0.100\"     \"0.0000100\" #> [7] \"100000.\"   formatC(signif(x, 3), format=\"fg\", flag=\"#\", digits=3) #> [1] \"0.900\"     \"12300.\"    \"1.20\"      \"1.00\"      \"0.100\"     \"0.0000100\" #> [7] \"100000.\"    # Could always remove the trailing \".\" sub(\"[.]$\", \"\", formatC(x, format=\"fg\", flag=\"#\", digits=3)) #> [1] \"0.900\"     \"12345\"     \"1.20\"      \"1.00\"      \"0.100\"     \"0.0000100\" #> [7] \"100000\""},{"path":"/reference/stats.apply.rounding.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply rounding to basic descriptive statistics. — stats.apply.rounding","title":"Apply rounding to basic descriptive statistics. — stats.apply.rounding","text":"statistics rounded way, . function apply rounding selectively list statistics returned stats.default. particular round counts (N, NMISS FREQ), MIN, MAX MEDIAN digits interpreted minimum number significant digits, loose precision. Percentages rounded fixed number decimal places (default 1) rather specific number significant digits.","code":""},{"path":"/reference/stats.apply.rounding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply rounding to basic descriptive statistics. — stats.apply.rounding","text":"","code":"stats.apply.rounding(   x,   digits = 3,   digits.pct = 1,   round.median.min.max = TRUE,   round.integers = TRUE,   round5up = TRUE,   rounding.fn = signif_pad,   ... )"},{"path":"/reference/stats.apply.rounding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply rounding to basic descriptive statistics. — stats.apply.rounding","text":"x list, returned stats.default. digits integer specifying number significant digits keep. digits.pct integer specifying number digits decimal place percentages. round.median.min.max rounding applied median, min max? round.integers rounding limited digits right decimal point? round5up numbers 5 last digit always rounded ? standard R approach \"go even digit\" (IEC 60559 standard, see round), softwares (e.g. SAS, Excel) always round . rounding.fn function use rounding. Defaults signif_pad. ... arguments.","code":""},{"path":"/reference/stats.apply.rounding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply rounding to basic descriptive statistics. — stats.apply.rounding","text":"list number elements x. rounded values character (numeric) 0 padding ensure consistent number significant digits.","code":""},{"path":[]},{"path":"/reference/stats.apply.rounding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply rounding to basic descriptive statistics. — stats.apply.rounding","text":"","code":"x <- round(exp(rnorm(100, 1, 1)), 6) stats.default(x) #> $N #> [1] 100 #>  #> $NMISS #> [1] 0 #>  #> $SUM #> [1] 416.826 #>  #> $MEAN #> [1] 4.16826 #>  #> $SD #> [1] 4.466171 #>  #> $CV #> [1] 107.1471 #>  #> $GMEAN #> [1] 2.739768 #>  #> $GSD #> [1] 2.52568 #>  #> $GCV #> [1] 116.5947 #>  #> $MEDIAN #> [1] 2.926633 #>  #> $MIN #> [1] 0.281714 #>  #> $MAX #> [1] 26.90584 #>  #> $q01 #>        1%  #> 0.4105239  #>  #> $q02.5 #>      2.5%  #> 0.5351426  #>  #> $q05 #>        5%  #> 0.6353341  #>  #> $q10 #>       10%  #> 0.6650688  #>  #> $q25 #>      25%  #> 1.408417  #>  #> $q50 #>      50%  #> 2.926633  #>  #> $q75 #>      75%  #> 4.998712  #>  #> $q90 #>      90%  #> 9.251978  #>  #> $q95 #>      95%  #> 12.40016  #>  #> $q97.5 #>    97.5%  #> 16.43128  #>  #> $q99 #>      99%  #> 22.93844  #>  #> $Q1 #>      25%  #> 1.408417  #>  #> $Q2 #>      50%  #> 2.926633  #>  #> $Q3 #>      75%  #> 4.998712  #>  #> $IQR #>      75%  #> 3.590295  #>  #> $T1 #> 33.33333%  #>  1.828447  #>  #> $T2 #> 66.66667%  #>  4.124893  #>  stats.apply.rounding(stats.default(x), digits=3) #> $N #> [1] \"100\" #>  #> $NMISS #> [1] \"0\" #>  #> $SUM #> [1] \"417\" #>  #> $MEAN #> [1] \"4.17\" #>  #> $SD #> [1] \"4.47\" #>  #> $CV #> [1] \"107.1\" #>  #> $GMEAN #> [1] \"2.74\" #>  #> $GSD #> [1] \"2.53\" #>  #> $GCV #> [1] \"116.6\" #>  #> $MEDIAN #> [1] \"2.93\" #>  #> $MIN #> [1] \"0.282\" #>  #> $MAX #> [1] \"26.9\" #>  #> $q01 #>      1%  #> \"0.411\"  #>  #> $q02.5 #>    2.5%  #> \"0.535\"  #>  #> $q05 #>      5%  #> \"0.635\"  #>  #> $q10 #>     10%  #> \"0.665\"  #>  #> $q25 #>    25%  #> \"1.41\"  #>  #> $q50 #>    50%  #> \"2.93\"  #>  #> $q75 #>    75%  #> \"5.00\"  #>  #> $q90 #>    90%  #> \"9.25\"  #>  #> $q95 #>    95%  #> \"12.4\"  #>  #> $q97.5 #>  97.5%  #> \"16.4\"  #>  #> $q99 #>    99%  #> \"22.9\"  #>  #> $Q1 #>    25%  #> \"1.41\"  #>  #> $Q2 #>    50%  #> \"2.93\"  #>  #> $Q3 #>    75%  #> \"5.00\"  #>  #> $IQR #>    75%  #> \"3.59\"  #>  #> $T1 #> 33.33333%  #>    \"1.83\"  #>  #> $T2 #> 66.66667%  #>    \"4.12\"  #>  stats.apply.rounding(stats.default(round(x, 1)), digits=3) #> $N #> [1] \"100\" #>  #> $NMISS #> [1] \"0\" #>  #> $SUM #> [1] \"417\" #>  #> $MEAN #> [1] \"4.17\" #>  #> $SD #> [1] \"4.47\" #>  #> $CV #> [1] \"107.2\" #>  #> $GMEAN #> [1] \"2.73\" #>  #> $GSD #> [1] \"2.53\" #>  #> $GCV #> [1] \"117.0\" #>  #> $MEDIAN #> [1] \"2.95\" #>  #> $MIN #> [1] \"0.300\" #>  #> $MAX #> [1] \"26.9\" #>  #> $q01 #>      1%  #> \"0.399\"  #>  #> $q02.5 #>    2.5%  #> \"0.548\"  #>  #> $q05 #>      5%  #> \"0.600\"  #>  #> $q10 #>     10%  #> \"0.700\"  #>  #> $q25 #>    25%  #> \"1.40\"  #>  #> $q50 #>    50%  #> \"2.95\"  #>  #> $q75 #>    75%  #> \"5.00\"  #>  #> $q90 #>    90%  #> \"9.28\"  #>  #> $q95 #>    95%  #> \"12.4\"  #>  #> $q97.5 #>  97.5%  #> \"16.4\"  #>  #> $q99 #>    99%  #> \"22.9\"  #>  #> $Q1 #>    25%  #> \"1.40\"  #>  #> $Q2 #>    50%  #> \"2.95\"  #>  #> $Q3 #>    75%  #> \"5.00\"  #>  #> $IQR #>    75%  #> \"3.60\"  #>  #> $T1 #> 33.33333%  #>    \"1.80\"  #>  #> $T2 #> 66.66667%  #>    \"4.10\"  #>"},{"path":"/reference/stats.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute some basic descriptive statistics. — stats.default","title":"Compute some basic descriptive statistics. — stats.default","text":"Values type factor, character logical treated categorical. logicals, two categories given labels `Yes` TRUE, `` FALSE.  Factor levels zero counts retained.","code":""},{"path":"/reference/stats.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute some basic descriptive statistics. — stats.default","text":"","code":"stats.default(x, quantile.type = 7, ...)"},{"path":"/reference/stats.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute some basic descriptive statistics. — stats.default","text":"x vector numeric, factor, character logical values. quantile.type integer 1 9, passed type argument function quantile. ... arguments (ignored).","code":""},{"path":"/reference/stats.default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute some basic descriptive statistics. — stats.default","text":"list. numeric x, list contains numeric elements: N: number non-missing values NMISS: number missing values SUM: sum non-missing values MEAN: mean non-missing values SD: standard deviation non-missing values MIN: minimum non-missing values MEDIAN: median non-missing values CV: percent coefficient variation non-missing values GMEAN: geometric mean non-missing values non-negative, NA GSD: geometric standard deviation non-missing values non-negative, NA GCV: percent geometric coefficient variation   non-missing values non-negative, NA qXX: various quantiles (percentiles) non-missing   values (q01: 1%, q02.5: 2.5%, q05: 5%, q10: 10%, q25: 25% (first   quartile), q33.3: 33.33333% (first tertile), q50: 50% (median, second   quartile), q66.7: 66.66667% (second tertile), q75: 75% (third quartile),   q90: 90%, q95: 95%, q97.5: 97.5%, q99: 99%) Q1: first quartile non-missing values (alias q25) Q2: second quartile non-missing values (alias q50 Median) Q3: third quartile non-missing values (alias q75) IQR: inter-quartile range non-missing values (.e., Q3 - Q1) T1: first tertile non-missing values (alias q33.3) T2: second tertile non-missing values (alias q66.7) x categorical (.e. factor, character logical), list contains sublist category, sublist contains numeric elements: FREQ: frequency count PCT: percent relative frequency, including NA denominator PCTnoNA: percent relative frequency, excluding NA denominator NMISS: number missing values","code":""},{"path":"/reference/stats.default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute some basic descriptive statistics. — stats.default","text":"","code":"x <- exp(rnorm(100, 1, 1)) stats.default(x) #> $N #> [1] 100 #>  #> $NMISS #> [1] 0 #>  #> $SUM #> [1] 521.1011 #>  #> $MEAN #> [1] 5.211011 #>  #> $SD #> [1] 11.57429 #>  #> $CV #> [1] 222.1122 #>  #> $GMEAN #> [1] 2.933438 #>  #> $GSD #> [1] 2.602334 #>  #> $GCV #> [1] 122.314 #>  #> $MEDIAN #> [1] 2.851331 #>  #> $MIN #> [1] 0.3002564 #>  #> $MAX #> [1] 112.8022 #>  #> $q01 #>        1%  #> 0.3371718  #>  #> $q02.5 #>      2.5%  #> 0.3953798  #>  #> $q05 #>        5%  #> 0.6640415  #>  #> $q10 #>      10%  #> 1.024823  #>  #> $q25 #>      25%  #> 1.678614  #>  #> $q50 #>      50%  #> 2.851331  #>  #> $q75 #>      75%  #> 5.400385  #>  #> $q90 #>      90%  #> 10.31669  #>  #> $q95 #>      95%  #> 14.40168  #>  #> $q97.5 #>    97.5%  #> 16.32419  #>  #> $q99 #>      99%  #> 23.53208  #>  #> $Q1 #>      25%  #> 1.678614  #>  #> $Q2 #>      50%  #> 2.851331  #>  #> $Q3 #>      75%  #> 5.400385  #>  #> $IQR #>      75%  #> 3.721772  #>  #> $T1 #> 33.33333%  #>  1.820745  #>  #> $T2 #> 66.66667%  #>  3.918019  #>   y <- factor(sample(0:1, 99, replace=TRUE), labels=c(\"Female\", \"Male\")) y[1:10] <- NA stats.default(y) #> $Female #> $Female$FREQ #> [1] 37 #>  #> $Female$PCT #> [1] 37.37374 #>  #> $Female$PCTnoNA #> [1] 41.57303 #>  #> $Female$NMISS #> [1] 10 #>  #>  #> $Male #> $Male$FREQ #> [1] 52 #>  #> $Male$PCT #> [1] 52.52525 #>  #> $Male$PCTnoNA #> [1] 58.42697 #>  #> $Male$NMISS #> [1] 10 #>  #>  stats.default(is.na(y)) #> $Yes #> $Yes$FREQ #> [1] 10 #>  #> $Yes$PCT #> [1] 10.10101 #>  #> $Yes$PCTnoNA #> [1] 10.10101 #>  #> $Yes$NMISS #> [1] 0 #>  #>  #> $No #> $No$FREQ #> [1] 89 #>  #> $No$PCT #> [1] 89.89899 #>  #> $No$PCTnoNA #> [1] 89.89899 #>  #> $No$NMISS #> [1] 0 #>  #>"},{"path":"/reference/subsetp.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset function that preserves column attributes. — subsetp","title":"Subset function that preserves column attributes. — subsetp","text":"Subset function preserves column attributes.","code":""},{"path":"/reference/subsetp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset function that preserves column attributes. — subsetp","text":"","code":"subsetp(x, ..., droplevels = TRUE)"},{"path":"/reference/subsetp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset function that preserves column attributes. — subsetp","text":"x object subsetted (usually data.frame). ... arguments passed subset. droplevels TRUE (default), unused factor levels dropped (see droplevels).","code":""},{"path":"/reference/subsetp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset function that preserves column attributes. — subsetp","text":"object similar x containing just selected elements. case data.frame, attributes columns (label units) preserved.","code":""},{"path":[]},{"path":"/reference/t1flex.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a table1 object to flextable. — t1flex","title":"Convert a table1 object to flextable. — t1flex","text":"Convert table1 object flextable.","code":""},{"path":"/reference/t1flex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a table1 object to flextable. — t1flex","text":"","code":"t1flex(x, tablefn = c(\"qflextable\", \"flextable\", \"regulartable\"), ...)"},{"path":"/reference/t1flex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a table1 object to flextable. — t1flex","text":"x object returned table1. tablefn Choose function flextable package use basis table. ... options passed tablefn.","code":""},{"path":"/reference/t1flex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a table1 object to flextable. — t1flex","text":"flextable object.","code":""},{"path":"/reference/t1flex.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert a table1 object to flextable. — t1flex","text":"flextable package needs installed work.","code":""},{"path":"/reference/t1kable.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a table1 object to kabelExtra. — t1kable","title":"Convert a table1 object to kabelExtra. — t1kable","text":"Convert table1 object kabelExtra.","code":""},{"path":"/reference/t1kable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a table1 object to kabelExtra. — t1kable","text":"","code":"t1kable(x, booktabs = TRUE, ..., format)"},{"path":"/reference/t1kable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a table1 object to kabelExtra. — t1kable","text":"x object returned table1. booktabs Passed kbl (default TRUE). ... options passed kbl. format Passed kbl (optional).","code":""},{"path":"/reference/t1kable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a table1 object to kabelExtra. — t1kable","text":"kabelExtra object.","code":""},{"path":"/reference/t1kable.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert a table1 object to kabelExtra. — t1kable","text":"kableExtra package needs installed work.","code":""},{"path":"/reference/t1read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and augment data with extended metadata attributes — t1read","title":"Read and augment data with extended metadata attributes — t1read","text":"Read augment data extended metadata attributes","code":""},{"path":"/reference/t1read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and augment data with extended metadata attributes — t1read","text":"","code":"t1read(data, metadata = NULL, read.fun = read.csv, ..., escape.html = TRUE)"},{"path":"/reference/t1read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and augment data with extended metadata attributes — t1read","text":"data Either file name (character) data.frame. file name read using function read.fun. metadata Either file name (character) list. file name read using function read_yaml (file contains valid YAML text), list results. See Details regarding list contents. read.fun function read files. accept file name first argument return data.frame. ... optional arguments, passed read.fun. escape.html Logical. strings (labels, units) converted valid HTML escaping special symbols?","code":""},{"path":"/reference/t1read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and augment data with extended metadata attributes — t1read","text":"data.frame (returned read.fun).","code":""},{"path":"/reference/t1read.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read and augment data with extended metadata attributes — t1read","text":"metadata list may contain following 3 named elements (elements ignored): labels: named list, names corresponding columns data   values associated label attribute. units: named list, names corresponding columns data   values associated units attribute. categoricals: named list, names corresponding columns   data values lists, used convert column   factor: list names levels, values   associated labels. names can also omitted goal just   specify order factor levels.","code":""},{"path":"/reference/t1read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and augment data with extended metadata attributes — t1read","text":"","code":"# Simulate some data set.seed(123) data <- expand.grid(sex=0:1, cohort=1:3)[rep(1:6, times=c(7, 9, 21, 22, 11, 14)),] data$age <- runif(nrow(data), 18, 80) data$agecat <- 1*(data$age >= 65) data$wgt <- rnorm(nrow(data), 75, 15)  metadata <- list(   labels=list(     cohort = \"Cohort\",     sex = \"Sex\",     age = \"Age\",     agecat  = \"Age category\",     wgt = \"Weight\"),   units=list(     age = \"years\",     wgt = \"kg\"),   categoricals=list(     cohort = list(       `1` = \"Cohort A\",       `2` = \"Cohort B\",       `3` = \"Cohort C\"),     sex = list(       `0` = \"Female\",       `1` = \"Male\"),     agecat = list(       `0` = \"< 65\",       `1` = \"\\U{2265} 65\")))   data <- t1read(data, metadata)  table1(~ sex + age + agecat + wgt | cohort, data=data)"},{"path":"/reference/table.rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to HTML table rows. — table.rows","title":"Convert to HTML table rows. — table.rows","text":"Many functions exist R generate HTML tables.  functions useful generating HTML table fragments (rather whole tables), can used build complete tables. first column used label rows table. Row labels, specified, can special HTML class designated, can useful hook customize appearance using CSS. true first last row cells.","code":""},{"path":"/reference/table.rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to HTML table rows. — table.rows","text":"","code":"table.rows(   x,   row.labels = rownames(x),   th = FALSE,   class = NULL,   rowlabelclass = \"rowlabel\",   firstrowclass = \"firstrow\",   lastrowclass = \"lastrow\",   ... )  table.data(   x,   row.labels = rownames(x),   th = FALSE,   class = NULL,   rowlabelclass = \"rowlabel\",   firstrowclass = \"firstrow\",   lastrowclass = \"lastrow\",   ... )"},{"path":"/reference/table.rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to HTML table rows. — table.rows","text":"x vector table-like structure (e.g. data.frame matrix). row.labels Values first column, typically used label row, NULL omit. th logical. th tags used rather td? class HTML class attribute. Can single character, vector matrix. rowlabelclass HTML class attribute row labels (.e. first column). firstrowclass HTML class attribute first row cells. lastrowclass HTML class attribute last row cells. ... Additional arguments.","code":""},{"path":"/reference/table.rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to HTML table rows. — table.rows","text":"character contains HTML table fragment.","code":""},{"path":"/reference/table.rows.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Convert to HTML table rows. — table.rows","text":"table.data(): Convert HTML table data (cells).","code":""},{"path":"/reference/table.rows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to HTML table rows. — table.rows","text":"","code":"x <- matrix(signif_pad(exp(rnorm(5*5, 1, 1))), 5, 5) table.data(x) #> [1] \"<td class='firstrow'>3.44<\/td>\\n<td class='firstrow'>4.27<\/td>\\n<td class='firstrow'>0.631<\/td>\\n<td class='firstrow'>2.09<\/td>\\n<td class='firstrow'>0.630<\/td>\" #> [2] \"<td>2.94<\/td>\\n<td>2.83<\/td>\\n<td>5.70<\/td>\\n<td>0.564<\/td>\\n<td>5.41<\/td>\"                                                                                       #> [3] \"<td>1.04<\/td>\\n<td>1.78<\/td>\\n<td>18.3<\/td>\\n<td>0.598<\/td>\\n<td>22.2<\/td>\"                                                                                       #> [4] \"<td>2.53<\/td>\\n<td>0.349<\/td>\\n<td>0.642<\/td>\\n<td>0.548<\/td>\\n<td>0.750<\/td>\"                                                                                    #> [5] \"<td class='lastrow'>11.5<\/td>\\n<td class='lastrow'>8.43<\/td>\\n<td class='lastrow'>5.48<\/td>\\n<td class='lastrow'>1.60<\/td>\\n<td class='lastrow'>5.98<\/td>\"        cat(table.rows(x, NULL)) #> <tr> #> <td class='rowlabel firstrow'><\/td> #> <td class='firstrow'>3.44<\/td> #> <td class='firstrow'>4.27<\/td> #> <td class='firstrow'>0.631<\/td> #> <td class='firstrow'>2.09<\/td> #> <td class='firstrow'>0.630<\/td> #> <\/tr> #> <tr> #> <td class='rowlabel'><\/td> #> <td>2.94<\/td> #> <td>2.83<\/td> #> <td>5.70<\/td> #> <td>0.564<\/td> #> <td>5.41<\/td> #> <\/tr> #> <tr> #> <td class='rowlabel'><\/td> #> <td>1.04<\/td> #> <td>1.78<\/td> #> <td>18.3<\/td> #> <td>0.598<\/td> #> <td>22.2<\/td> #> <\/tr> #> <tr> #> <td class='rowlabel'><\/td> #> <td>2.53<\/td> #> <td>0.349<\/td> #> <td>0.642<\/td> #> <td>0.548<\/td> #> <td>0.750<\/td> #> <\/tr> #> <tr> #> <td class='rowlabel lastrow'><\/td> #> <td class='lastrow'>11.5<\/td> #> <td class='lastrow'>8.43<\/td> #> <td class='lastrow'>5.48<\/td> #> <td class='lastrow'>1.60<\/td> #> <td class='lastrow'>5.98<\/td> #> <\/tr> cat(table.rows(x, LETTERS[1:nrow(x)])) #> <tr> #> <td class='rowlabel firstrow'>A<\/td> #> <td class='firstrow'>3.44<\/td> #> <td class='firstrow'>4.27<\/td> #> <td class='firstrow'>0.631<\/td> #> <td class='firstrow'>2.09<\/td> #> <td class='firstrow'>0.630<\/td> #> <\/tr> #> <tr> #> <td class='rowlabel'>B<\/td> #> <td>2.94<\/td> #> <td>2.83<\/td> #> <td>5.70<\/td> #> <td>0.564<\/td> #> <td>5.41<\/td> #> <\/tr> #> <tr> #> <td class='rowlabel'>C<\/td> #> <td>1.04<\/td> #> <td>1.78<\/td> #> <td>18.3<\/td> #> <td>0.598<\/td> #> <td>22.2<\/td> #> <\/tr> #> <tr> #> <td class='rowlabel'>D<\/td> #> <td>2.53<\/td> #> <td>0.349<\/td> #> <td>0.642<\/td> #> <td>0.548<\/td> #> <td>0.750<\/td> #> <\/tr> #> <tr> #> <td class='rowlabel lastrow'>E<\/td> #> <td class='lastrow'>11.5<\/td> #> <td class='lastrow'>8.43<\/td> #> <td class='lastrow'>5.48<\/td> #> <td class='lastrow'>1.60<\/td> #> <td class='lastrow'>5.98<\/td> #> <\/tr> cat(table.rows(LETTERS[1:3], \"Headings\", th=TRUE)) #> <tr> #> <th class='rowlabel firstrow lastrow'>Headings<\/th> #> <th class='firstrow lastrow'>A<\/th> #> <th class='firstrow lastrow'>B<\/th> #> <th class='firstrow lastrow'>C<\/th> #> <\/tr>"},{"path":"/reference/table1.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an HTML table of descriptive statistics. — table1","title":"Generate an HTML table of descriptive statistics. — table1","text":"Produces nicely formatted table descriptive statistics number numeric categorical variables, optionally stratified factor.","code":""},{"path":"/reference/table1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an HTML table of descriptive statistics. — table1","text":"","code":"table1(x, ...)  # S3 method for default table1(   x,   labels,   groupspan = NULL,   rowlabelhead = \"\",   transpose = FALSE,   topclass = \"Rtable1\",   footnote = NULL,   caption = NULL,   render = render.default,   render.strat = render.strat.default,   extra.col = NULL,   extra.col.pos = NULL,   ... )  # S3 method for formula table1(   x,   data,   overall = \"Overall\",   rowlabelhead = \"\",   transpose = FALSE,   droplevels = TRUE,   topclass = \"Rtable1\",   footnote = NULL,   caption = NULL,   render = render.default,   render.strat = render.strat.default,   extra.col = NULL,   extra.col.pos = NULL,   ... )"},{"path":"/reference/table1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an HTML table of descriptive statistics. — table1","text":"x object, typically formula list data.frames (see Details). ... arguments, passed render. labels list containing labels variables, strata groups (see Details). groupspan vector integers specifying number strata group together. rowlabelhead heading first column table, contains row labels. transpose Logical. table transposed (.e. strata rows variables columns)? topclass class attribute outermost (.e. <table>) tag. footnote character string added footnote table. Can also vector results multiple lines footnotes. default NULL causes footnote omitted. caption character string added caption table. default NULL causes caption omitted. render function render table cells (see Details). render.strat function render stratum labels. Accepts 3 arguments: stratum label, stratum size (number observations), flag indicating whether transpose mode . See render.strat.default example. extra.col optional names list functions produce extra columns table (see Details). extra.col.pos optional integer vector given positions extra columns (see Details). data formula interface, data.frame variables x taken. overall label \"Overall\" column. Specify NULL FALSE omit column altogether. default, \"Overall\" column appears right end table; place left instead use named character name \"left\", e.g. c(left=\"Overall\"). droplevels empty factor levels dropped?","code":""},{"path":"/reference/table1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an HTML table of descriptive statistics. — table1","text":"object class \"table1\".","code":""},{"path":"/reference/table1.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate an HTML table of descriptive statistics. — table1","text":"two interfaces, default, typically takes list data.frames x, formula interface. formula interface less flexible, simpler use designed handle common use cases. important use factors appropriately categorical variables (.e. levels labeled properly desired order). contents table can customized providing user-defined `renderer' functions. Customization table appearance deliberately attempted, best accomplished CSS. facilitate , tags (row labels) given specific classes easy CSS selection. formula version, formula expected one-sided formula, optionally  vertical bar separating variables appear data table (rows) used stratification (.e. columns). can 2 variables stratification (one transpose = TRUE specified), 2 specified, second nested within first. Stratification variables may contain missing values. formula may contain dot (\".\") refer \"variables data appear elsewhere formula\". legitimate use functions inside formula create new variables. default version, expected x named list data.frames, one stratum, names corresponding strata labels. Extra columns can added table using extra.col argument. optional named list functions, names corresponding column headings. function called variable included table. function expect 2 arguments, first list, second name variable. contents list passed first argument data associated stratum table; .e., one element normal column (extra column). function compute value appear extra column return string. default, extra columns placed far right, normal columns, order specified . can overridden, however, using extra.col.pos vector integer positions. example, place first extra column position 1 (far left), second extra column position 3, use extra.col.pos = c(1, 3); extra columns assigned positions placed far right. typical use case extra columns column p-values differences strata. Note feature available option transpose = TRUE specified.","code":""},{"path":"/reference/table1.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Generate an HTML table of descriptive statistics. — table1","text":"table1(default): default interface, x data.frame. table1(formula): formula interface.","code":""},{"path":"/reference/table1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an HTML table of descriptive statistics. — table1","text":"","code":"dat <- expand.grid(id=1:10, sex=c(\"Male\", \"Female\"), treat=c(\"Treated\", \"Placebo\")) dat$age <- runif(nrow(dat), 10, 50) dat$age[3] <- NA  # Add a missing value dat$wt <- exp(rnorm(nrow(dat), log(70), 0.2))  label(dat$sex) <- \"Sex\" label(dat$age) <- \"Age\" label(dat$treat) <- \"Treatment Group\" label(dat$wt) <- \"Weight\"  units(dat$age) <- \"years\" units(dat$wt) <- \"kg\"  # One level of stratification table1(~ sex + age + wt | treat, data=dat)  # Two levels of stratification (nesting) table1(~ age + wt | treat*sex, data=dat)  # Switch the order or nesting table1(~ age + wt | sex*treat, data=dat)  # No stratification table1(~ treat + sex + age + wt, data=dat)  # Something more complicated  dat$dose <- ifelse(dat$treat==\"Placebo\", \"Placebo\",                    sample(c(\"5 mg\", \"10 mg\"), nrow(dat), replace=TRUE)) dat$dose <- factor(dat$dose, levels=c(\"Placebo\", \"5 mg\", \"10 mg\"))  strata <- c(split(dat, dat$dose),             list(\"All treated\"=subset(dat, treat==\"Treated\")),             list(Overall=dat))  labels <- list(     variables=list(sex=render.varlabel(dat$sex),                    age=render.varlabel(dat$age),                    wt=render.varlabel(dat$wt)),     groups=list(\"\", \"Treated\", \"\"))  my.render.cont <- function(x) {     with(stats.default(x),          sprintf(\"%0.2f (%0.1f)\", MEAN, SD)) }  table1(strata, labels, groupspan=c(1, 3, 1), render.continuous=my.render.cont)  # Transposed table table1(~ age + wt | treat, data=dat, transpose=TRUE)"},{"path":"/reference/units.html","id":null,"dir":"Reference","previous_headings":"","what":"Units attribute. — units","title":"Units attribute. — units","text":"Units attribute.","code":""},{"path":"/reference/units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Units attribute. — units","text":"","code":"units(x)  units(x) <- value  has.units(x)"},{"path":"/reference/units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Units attribute. — units","text":"x object. value character specifying units","code":""},{"path":"/reference/units.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Units attribute. — units","text":"units(x) <- value: Set units attribute. .units(): Check attribute.","code":""},{"path":"/reference/units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Units attribute. — units","text":"","code":"x <- 1:10 units(x) <- \"cm\" has.units(x) #> [1] TRUE units(x) #> [1] \"cm\""},{"path":"/reference/update_html.html","id":null,"dir":"Reference","previous_headings":"","what":"Update HTML. — update_html","title":"Update HTML. — update_html","text":"Used (re-)generate HTML code link{table1} object. cases, used direction, unless know .","code":""},{"path":"/reference/update_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update HTML. — update_html","text":"","code":"update_html(x)"},{"path":"/reference/update_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update HTML. — update_html","text":"x object returned table1.","code":""},{"path":"/reference/update_html.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update HTML. — update_html","text":"object class \"table1\" contains updated HTML.","code":""},{"path":"/news/index.html","id":"table1-144","dir":"Changelog","previous_headings":"","what":"table1 1.4.4","title":"table1 1.4.4","text":"Fix extra columns column groups (#106). Fix bug t1flex() (#103). Handle NA parse.abbrev.render.code().","code":""},{"path":"/news/index.html","id":"table1-143","dir":"Changelog","previous_headings":"","what":"table1 1.4.3","title":"table1 1.4.3","text":"CRAN release: 2023-01-06 Change space .data.frame.table1() (#60). Add NMISS output stats.default() categorical variables. Handle NMISS properly stats.apply.rounding() (decimals). Fix handling abbreviated code render.missing. Correct default rounding PCTnoNA (ie, using digits.pct). Fix issue t1kable (#82). Fix problem t1kable row label contains data. Choose qflextable, flextable regulartable t1flex. Add extra columns groupspan headers t1flex t1kable (#93). Option place overall left (#88). Missing values stratification variable(s) raises error (#80).","code":""},{"path":"/news/index.html","id":"table1-142","dir":"Changelog","previous_headings":"","what":"table1 1.4.2","title":"table1 1.4.2","text":"CRAN release: 2021-06-06 Add option rounding.fn stats.apply.rounding() allow changing rounding behaviour (thanks Niels Hagenbuch suggestion) Add geometric standard deviation (GSD) output stats.default(). Fixed error passing digits (thanks Niels Hagenbuch reporting ). Fixed integer formatting (issue #55). Fixed issue #53.","code":""},{"path":"/news/index.html","id":"table1-141","dir":"Changelog","previous_headings":"","what":"table1 1.4.1","title":"table1 1.4.1","text":"CRAN release: 2021-05-19 Fix warning one examples.","code":""},{"path":"/news/index.html","id":"table1-14","dir":"Changelog","previous_headings":"","what":"table1 1.4","title":"table1 1.4","text":"CRAN release: 2021-04-28 Headline feature: ability convert table1 output data.frame, flextable kableExtra object (though limitations). direct consequence, table1 can now used within LaTeX documents, new vignette document feature. Output .docx also possible feature (pandoc flextable). Fomulas containing dot (‘.’) now handled correctly (‘.’ means “variables appear elsewhere formula”). Arguments formatC (e.g. big.mark) apply numbers default (previously, continuous variables ). New setLabel() function provides alternative syntax setting labels (useful setting label inside formula).","code":""},{"path":"/news/index.html","id":"table1-13","dir":"Changelog","previous_headings":"","what":"table1 1.3","title":"table1 1.3","text":"CRAN release: 2021-03-28 headline feature extra.col option, gives flexible way add extra columns (e.g. P-values, SMD, …) table (thanks Matt Leipzig helping suggestions testing ). Footnotes now appear tag better placement. General improvements documentation.","code":""},{"path":"/news/index.html","id":"table1-1-3","dir":"Changelog","previous_headings":"","what":"table1 1.2.1","title":"table1 1.3","text":"CRAN release: 2021-03-28 Fixed issue causing vignette build fail (due changes made MatchIt package’s lalonde data set). Allow multiple footnotes.","code":""},{"path":"/news/index.html","id":"table1-1-3-1","dir":"Changelog","previous_headings":"","what":"table1 1.2","title":"table1 1.3","text":"CRAN release: 2021-03-28 Added caption argument generate caption table. Set render.missing=NULL ignore missing values. Added SUM stats.default continuous variables. Added PCTnoNA stats.default na..category option render.categorical.default. Changed (n=XX) (N=XX) default table header. Improved error handling function eqcut. Function signif_pad can now use different decimal marks support different locales. Added function round_pad (similar signif_pad fixed rounding). Added function t1read.","code":""},{"path":"/news/index.html","id":"table1-1-3-2","dir":"Changelog","previous_headings":"","what":"table1 1.1","title":"table1 1.3","text":"CRAN release: 2021-03-28 Added quantile.type argument stats.default allow selecting quantile type computed. Special handling “0%” “100%” stats.apply.rounding decimals shown. droplevels now works properly nested grouping. table1 now returns character string (containing HTML). print method handles printing. longer need use capture.output embed table1 shiny app. Removed standalone option longer needed. Use htmltools functionality print. Preview RStudio notebook now works (issue #7). Added knit_print method. need specify results=\"asis\" chunk option anymore knitting. Default CSS included automatically. can still overridden specifying custom stylesheet R Markdown. Changed notation upper case “Q” small case “q” percentiles stats.default. Q1 Q3 now aliases q25 q75 respectively stats.default. Tertiles added stats.default. New function eqcut creating equal-sized categories continuous variables. New footnote argument adding footnote table. vignette expanded new examples documentation improved.","code":""},{"path":"/news/index.html","id":"table1-1-3-3","dir":"Changelog","previous_headings":"","what":"table1 1.0","title":"table1 1.3","text":"CRAN release: 2021-03-28 initial release table1 CRAN.","code":""}]
